<?xml version="1.0"?>

<!-- *************************************************************************************
	Functions for automated scripts of Transducer SVPs.

	Rev 1.0 - 2011-June16 - Initial realease created by Jia Qi
	Rev 1.1 - 2011-Nov.3 - updated typo
	Rev 1.2 - 2012-Feb.10 - updated TxPower as per Jerrod
************************************************************************************** -->

<script>
	<!-- *************************************************************************************

		Initializes transducer sub function A (bring up the "Select Application" pop up window)

		Example:
			<action code="InitializeTransducerA('MS-200', 'General Imaging')"/>   

	************************************************************************************** -->
	<function name="InitializeTransducerA" inline="false">
		<param name="$transducer"/>
		<param name="$application"/>
		
		<!-- log: Initializing transducer xxx with application xxx... -->
		<action code="=($logmsg, 'Initializing transducer ')"/>
		<action code="+=($logmsg, $transducer)"/>
		<action code="+=($logmsg, ' with application ')"/>
		<action code="+=($logmsg, $application)"/>
		<action code="+=($logmsg, '...')"/>
		<log>script:$logmsg</log>

		<!-- click [AppSelect] key and wait 3 sec -->
		<cmd code="AppSelect"/>
		<sleep time="3000"/>
	</function>

	<!-- *************************************************************************************

		Initializes transducer sub function B (select transducer)

		Example:
			<action code="InitializeTransducerB('MS-250')"/>   

	************************************************************************************** -->
	<function name="InitializeTransducerB" inline="false">
		<param name="$transducer"/>

		<!-- select proper transducer -->
		<action code="=($trans, '#K')"/>	<!-- use Alt+Ctrl+Shift+# keys to select transducer -->
		<choose>
			<when test="equal($transducer, 'MS-200')">
				<action code="+=($trans, '1')"/>
			</when>
			<when test="equal($transducer, 'MS-250')">
				<action code="+=($trans, '2')"/>
			</when>
			<when test="equal($transducer, 'MS-250S')">
				<action code="+=($trans, '9')"/>
			</when>
			<when test="equal($transducer, 'LZ-250')">
				<action code="+=($trans, '3')"/>
			</when>
			<when test="equal($transducer, 'MS-400')">
				<action code="+=($trans, '5')"/>
			</when>
			<when test="equal($transducer, 'MS-550D')">
				<action code="+=($trans, '4')"/>
			</when>
			<when test="equal($transducer, 'MS-550S')">
				<action code="+=($trans, '6')"/>
			</when>
			<when test="equal($transducer, 'LZ-550')">
				<action code="+=($trans, '8')"/>
			</when>
			<when test="equal($transducer, 'MS-700')">
				<action code="+=($trans, '7')"/>
			</when>
		</choose>
		<action code="+=($trans, 'ACS #T2000')"/>	<!-- wait 2 sec -->
		<ui>
			<input key="script:$trans"/>  <!-- select transducer and wait 2 sec -->
			<input key="#ST"/>  <!-- set focus to Application selection combo box -->
		</ui>
	</function>

	<!-- *************************************************************************************

		Initializes transducer sub function C (select application)

		Example:
			<action code="InitializeTransducerC('Cardiology')"/>   

	************************************************************************************** -->
	<function name="InitializeTransducerC" inline="false">
		<param name="$application"/>

		<!-- select proper application -->
		<!-- this will not work if we have multiple applications that start with the same letter -->
 		<action code="=($app, '#K')"/>
		<choose>
			<when test="equal($application, 'General Imaging')">
				<action code="+=($app, 'g')"/>
			</when>
			<when test="equal($application, 'Cardiology')">
				<action code="+=($app, 'c')"/>
			</when>
		</choose>
		<action code="+=($app, ' #T1000')"/>	<!-- wait 1 sec -->
		<ui>
			<input key="script:$app"/>  <!-- select proper application and wait 1 sec-->
			<input key="#SE"/>  <!-- use Enter key to OK the Select Application window -->
		</ui>
	</function>

	<!-- *************************************************************************************

		Initializes transducer sub function D (verify initialized transducer and application)

		Example:
			<action code="InitializeTransducerD('MS-400', 'General Imaging')"/>   

	************************************************************************************** -->
	<function name="InitializeTransducerD" inline="false">
		<param name="$transducer"/>
		<param name="$application"/>

		<!-- wait 1 min or until transducer is activated -->
		<action code="=($flag, 'FAIL')"/>
		<loop count="60">
			<sleep time="1000"/>
			<pdm action="read" name="App/Settings/System/State" return="$check"/>
			<action code="=($checkActivated, bitwiseAnd($check, 512))"/>
			<if test="equal($checkActivated, 512)">	<!-- if the 9th checkbox Transducer Activated is checed -->
				<action code="=($flag, 'PASS')"/>
				<break/>
			</if>
		</loop>

		<!-- read current transducer name -->
		<pdm action="read" name="Acq/Transducer/Transducer-General/Name" return="$ctransducer"/>
		<!-- read current application name -->
		<pdm action="read" name="Acq/Mode/Settings/Application" return="$capplication"/>

		<!-- log: PASS! Transducer xxx is initialized with application xxx. -->
		<if test="and(equal($flag, 'PASS'), and(equal($transducer, $ctransducer), equal($application, $capplication)))">
			<action code="=($logmsg, $flag)"/>
			<action code="+=($logmsg, '! Transducer ')"/>
			<action code="+=($logmsg, $ctransducer)"/>
			<action code="+=($logmsg, ' is initialized with application ')"/>
			<action code="+=($logmsg, $capplication)"/>
			<action code="+=($logmsg, '.')"/>
			<log>script:$logmsg</log>
		</if>

		<!-- error log: FAIL! Transducer xxx is NOT initialized with application xxx! -->
		<if test="equal($flag, 'FAIL')">
			<action code="=($logmsg, $flag)"/>
			<action code="+=($logmsg, '! Transducer ')"/>
			<action code="+=($logmsg, $transducer)"/>
			<action code="+=($logmsg, ' is NOT initialized with application ')"/>
			<action code="+=($logmsg, $application)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>

		<!-- error log: FAIL! WRONG transducer xxx is initialized with application xxx! -->
		<if test="and(equal($flag, 'PASS'), notequal($transducer, $ctransducer))">
			<action code="=($logmsg, 'FAIL! WONG transducer ')"/>
			<action code="+=($logmsg, $ctransducer)"/>
			<action code="+=($logmsg, ' is initialized with application ')"/>
			<action code="+=($logmsg, $capplication)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>

		<!-- error log: FAIL! Transducer xxx is initialized with WRONG application xxx! -->
		<if test="and(equal($flag, 'PASS'), notequal($application, $capplication))">
			<action code="=($logmsg, 'FAIL! Transducer ')"/>
			<action code="+=($logmsg, $ctransducer)"/>
			<action code="+=($logmsg, ' is initialized with WRONG application ')"/>
			<action code="+=($logmsg, $capplication)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Initializes transducer with simulator

		Example:
			<action code="InitializeTransducerSim('MS-550D', 'Cardiology')"/>   

	************************************************************************************** -->
	<function name="InitializeTransducerSim" inline="false">
		<param name="$transducer"/>
		<param name="$application"/>		
		<action code="InitializeTransducerA($transducer, $application)"/>
		<action code="InitializeTransducerB($transducer)"/>
		<action code="InitializeTransducerC($application)"/>
		<action code="InitializeTransducerD($transducer, $application)"/>
	</function>

	<!-- *************************************************************************************

		Initializes transducer (on system if bSimualtor is 0)

		Example:
			<action code="InitializeTransducer('MS-700', 'General Imaging', bSimulator)"/>   

	************************************************************************************* -->
	<function name="InitializeTransducer" inline="false">
		<param name="$transducer"/>
		<param name="$application"/>
    <param name="$bSimulator"/>
    <action code="InitializeTransducerA($transducer, $application)"/>
    <if test="equal($bSimulator, 1)">
      <action code="InitializeTransducerB($transducer)"/>
    </if>
    <action code="InitializeTransducerC($application)"/>
		<action code="InitializeTransducerD($transducer, $application)"/>
	</function>

	<!-- *************************************************************************************

		Detect the current acquisition mode (either in scan or pause scan)

		Example:
			<action code="=($cmode, AcqMode())"/>

	************************************************************************************** -->
	<function name="AcqMode" inline="false" return="$cmode">

		<!-- read current acquisition mode name -->
		<!-- if do not assign $cmode here, then the scope of $cmode will be limited in the when statement -->
		<action code="=($cmode, 'test')"/>
		<pdm action="read" name="Acq/Mode/Settings/Mode" return="$check"/>
		<choose>
			<when test="equal($check, 1)">
				<action code="=($cmode, 'BMode')"/>
			</when>
			<when test="equal($check, 2)">
				<action code="=($cmode, 'PwMode')"/>
			</when>
			<when test="equal($check, 4)">
				<action code="=($cmode, 'TissueMode')"/>
			</when>
			<when test="equal($check, 8)">
				<action code="=($cmode, 'MMode')"/>
			</when>
			<when test="equal($check, 65536)">
				<action code="=($cmode, 'AMMode')"/>
			</when>
			<when test="equal($check, 16)">
				<action code="=($cmode, 'ColorMode')"/>
			</when>
			<when test="equal($check, 32)">
				<action code="=($cmode, 'PowerMode')"/>
			</when>
			<when test="equal($check, 128)">
				<action code="=($cmode, 'LCMode')"/>
			</when>
			<when test="equal($check, 256)">
				<action code="=($cmode, 'NLCMode')"/>
			</when>
			<when test="equal($check, 131072)">
				<action code="=($cmode, 'PaMode')"/>
			</when>
		</choose>
	</function>

	<!-- *************************************************************************************

		Start Scanning in requested mode (non 3D, non RF, LC and NLC dependes on preference panel setting)

		Example:
			<action code="StartScan('BMode')"/>
			<action code="StartScan('ColorMode')"/>
			<action code="StartScan('PowerMode')"/>
			<action code="StartScan('LCMode')"/>
			<action code="StartScan('NLCMode')"/>
			<action code="StartScan('PaMode')"/>
			<action code="StartScan('MMode')"/>
			<action code="StartScan('AMMode')"/>
			<action code="StartScan('PwMode')"/>
			<action code="StartScan('TissueMode')"/>

	************************************************************************************** -->
	<function name="StartScan" inline="false">
		<param name="$mode"/>

		<!-- if transducer is not initialized, use default one -->
		<pdm action="read" name="App/Settings/System/State" return="$check"/>
		<action code="=($checkActivated, bitwiseAnd($check, 512))"/>
		<if test="equal($checkActivated, 0)">		<!-- if the 9th checkbox Transducer Actived is NOT checed -->
			<action code="=($logmsg, 'No transducer is initialized, will use MS-250 with General Imaging, ')"/>
			<action code="+=($logmsg, 'which may make your test invalid!')"/>
			<log level="error">script:$logmsg</log>
			<action code="InitializeTransducerSim('MS-250', 'General Imaging')"/>
		</if>

		<!-- set 3D motor as initialized -->
		<pdm action="write" name="App/Settings/Hardware/3D-Motor-State" base="10">3</pdm>
		<sleep time="1000"/>
		<!-- read current 3D Motor State -->
		<pdm action="read" name="App/Settings/Hardware/3D-Motor-State" return="$check"/>
		<!-- log: PASS! 3D motor is initialized. -->
		<if test="equal($check, 3)">
			<action code="=($logmsg, 'PASS! 3D motor is initialized.')"/>
			<log>script:$logmsg</log>
		</if>
		<!-- error log: FAIL! 3D motor is NOT initialized! -->
		<if test="notequal($check, 3)">
			<action code="=($logmsg, 'FAIL! 3D motor is NOT initialized!')"/>
			<log level="error">script:$logmsg</log>
		</if>

		<!-- log: Start scanning in xxx... -->
		<action code="=($logmsg, 'Start scanning in ')"/>
		<action code="+=($logmsg, $mode)"/>
		<action code="+=($logmsg, '...')"/>
		<log>script:$logmsg</log>

		<!-- if not scan in $mode or in scan but $mode & $cmode not the same, then click the $mode key to start scan -->
		<action code="=($cmode, AcqMode())"/>		<!-- current acquisition mode -->
		<pdm action="read" name="App/Settings/System/State" return="$check"/>
		<action code="=($checkActivated, bitwiseAnd($check, 1024))"/>
		<!-- if the 10th checkbox Scanning is NOT checed OR in scan and $mode & $cmode not the same -->
		<if test="or(equal($checkActivated, 0), and(equal($checkActivated, 1024), notequal($mode, $cmode)))">
                	<if test="and(notequal($mode, 'LCMode'), notequal($mode, 'NLCMode'), notequal($mode, 'MMode'), notequal($mode, 'AMMode'))">
				<cmd code="script:$mode"/>
			</if>
			<if test="or(equal($mode, 'LCMode'), equal($mode, 'NLCMode'))">
				<cmd code="ContrastMode"/>
			</if>
                	<if test="or(equal($mode, 'MMode'), equal($mode, 'AMMode'))">
				<cmd code="MMode"/>
				<sleep time="1000"/>
				<if test="equal($mode, 'MMode')">
					<pdm action="write" name="Acq/M-Mode/AMModeSoft/Gate-Angle" base="10">0</pdm>
				</if>
				<if test="equal($mode, 'AMMode')">
					<pdm action="write" name="Acq/M-Mode/AMModeSoft/Gate-Angle" base="10">5</pdm>
				</if>
				<sleep time="1000"/>
				<cmd code="MMode"/>
			</if>
			<if test="or(equal($mode, 'PwMode'), equal($mode, 'TissueMode'))">
				<sleep time="1000"/>
				<cmd code="script:$mode"/>
			</if>
		</if>

		<!--wait 1 min or till scanning starts-->
		<action code="=($flag, 'FAIL')"/>
		<loop count="60">
			<sleep time="1000"/>
			<pdm action="read" name="App/Settings/System/State" return="$check"/>
			<action code="=($checkActivated, bitwiseAnd($check, 1024))"/>
			<if test="equal($checkActivated, 1024)">	<!-- if the 10th checkbox Scanning is checed -->
				<action code="=($flag, 'PASS')"/>
				<break/>
			</if>
		</loop>

		<!-- read current acquisition mode and store the value to $cmode -->
		<action code="=($cmode, AcqMode())"/>

		<!-- log: PASS! Scanning starts in xxx. -->
		<if test="and(equal($flag, 'PASS'), equal($mode, $cmode))">
			<action code="=($logmsg, $flag)"/>
			<action code="+=($logmsg, '! Scanning starts in ')"/>
			<action code="+=($logmsg, $cmode)"/>
			<action code="+=($logmsg, '.')"/>
			<log>script:$logmsg</log>
		</if>

		<!-- error log: FAIL! Scanning does NOT start in xxx! -->
		<if test="equal($flag, 'FAIL')">
			<action code="=($logmsg, $flag)"/>
			<action code="+=($logmsg, '! Scanning does NOT start in ')"/>
			<action code="+=($logmsg, $mode)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>

		<!-- error log: FAIL! Scanning starts in WRONG mode: xxx! -->
		<if test="and(equal($flag, 'PASS'), notequal($mode, $cmode))">
			<action code="=($logmsg, 'FAIL! Scanning starts in WRONG mode: ')"/>
			<action code="+=($logmsg, $cmode)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Pause Scanning

		Example:
			<action code="PauseScan()"/>

	************************************************************************************** -->
	<function name="PauseScan" inline="false">

		<!-- log: Pause scanning... -->
		<action code="=($logmsg, 'Pause scanning...')"/>
		<log>script:$logmsg</log>

		<!-- if in scanning, then click the mode key to pause scan -->
		<pdm action="read" name="App/Settings/System/State" return="$check"/>
		<action code="=($checkActivated, bitwiseAnd($check, 1024))"/>
		<if test="equal($checkActivated, 1024)">	<!-- if the 10th checkbox Scanning is checed -->			
			<cmd code="Freeze"/>
		</if>

		<!--wait 1 min or till scanning is paused-->
		<action code="=($flag, 'FAIL')"/>
		<loop count="60">
			<sleep time="1000"/>
			<pdm action="read" name="App/Settings/System/State" return="$check"/>
			<action code="=($checkActivated, bitwiseAnd($check, 1024))"/>
			<if test="equal($checkActivated, 0)">	<!-- if the 10th checkbox Scanning is NOT checed -->
				<action code="=($flag, 'PASS')"/>
				<break/>
			</if>
		</loop>

		<!-- log: PASS! Scanning is paused. -->
		<if test="and(equal($flag, 'PASS'), equal($mode, $cmode))">
			<action code="=($logmsg, $flag)"/>
			<action code="+=($logmsg, '! Scanning is paused.')"/>
			<log>script:$logmsg</log>
		</if>

		<!-- error log: FAIL! Scanning is NOT paused! -->
		<if test="equal($flag, 'FAIL')">
			<action code="=($logmsg, $flag)"/>
			<action code="+=($logmsg, '! Scanning is NOT paused!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Detect Current Position during scanning

		Example:
			<action code="CurrentPosition('B-Mode')"/>

	************************************************************************************** -->
	<function name="CurrentPosition" inline="false" return="$position">
		<param name="$mode"/>

		<!-- $path: Acq/$mode/Seeking/Current-Position -->
		<action code="=($path, 'Acq/')"/>
		<action code="+=($path, $mode)"/>
		<action code="+=($path, '/Seeking/Current-Position')"/>

		<!-- read current Line Density value -->
		<pdm action="read" name="script:$path" return="$position"/>
	</function>

	<!-- *************************************************************************************

		Compare Position before and after adjust parameter during scanning

		Example:
			<action code="ComparePosition($positionbefore, $positionafter, $same)"/>

	************************************************************************************** -->
	<function name="ComparePosition" inline="false">
		<param name="$positionbefore"/>
		<param name="$positionafter"/>
		<param name="$same"/>

		<if test="and(greater($positionbefore, $positionafter), notequal($same, 'na'))">
			<action code="=($flag, 'PASS')"/>
			<action code="=($logmsg, $flag)"/>
			<action code="+=($logmsg, '! Scanning restarts...')"/>
			<log>script:$logmsg</log>
		</if>
		<if test="equal($same, 'same')">
			<action code="=($flag, 'PASS')"/>
			<action code="=($logmsg, $flag)"/>
			<action code="+=($logmsg, '! Scanning will NOT restart due to same parameter value.')"/>
			<log>script:$logmsg</log>
		</if>
		<if test="and(equal($same, 'not same'), or(equal($positionbefore, $positionafter), less($positionbefore, $positionafter)))">
			<action code="=($flag, 'FAIL')"/>
			<action code="=($logmsg, $flag)"/>
			<action code="+=($logmsg, '! Scanning NOT restarts!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>
	
	<!-- *************************************************************************************

		Detects if scanning restarts or not (for function with 2 parameters)

		Example:
			<action code="ScanRestart2('LineDensity2', 'B-Mode', 'Standard')"/>

	************************************************************************************** -->
	<function name="ScanRestart2" inline="false" return="$same">
		<param name="$parameterfunction"/>
		<param name="$mode"/>
		<param name="$parametervalue"/>

		<sleep time="2000"/>
		<action code="=($positionbefore, CurrentPosition($mode))"/>
		<action code="=($same, $parameterfunction($mode, $parametervalue))"/>
		<action code="=($positionafter, CurrentPosition($mode))"/>
		<if test="equal($positionbefore, $positionafter)">
			<loop count="10">
				<sleep time="500"/>
				<action code="=($positionafter, CurrentPosition($mode))"/>
				<if test="notequal($positionbefore, $positionafter)">
					<break/>
				</if>
			</loop>
		</if>
		<action code="ComparePosition($positionbefore, $positionafter, $same)"/>
	</function>

	<!-- *************************************************************************************

		Detects if scanning restarts or not (for function with 3 parameters)

		Example:
			<action code="ScanRestart3('FocalZones', 'B-Mode', 'Tight Dual', 2.5)"/>

	************************************************************************************** -->
	<function name="ScanRestart3" inline="false" return="$same">
		<param name="$parameterfunction"/>
		<param name="$mode"/>
		<param name="$parametervalueA"/>
		<param name="$parametervalueB"/>

		<sleep time="2000"/>
		<action code="=($positionbefore, CurrentPosition($mode))"/>
		<action code="=($same, $parameterfunction($mode, $parametervalueA, $parametervalueB))"/>
		<action code="=($positionafter, CurrentPosition($mode))"/>
		<if test="equal($positionbefore, $positionafter)">
			<loop count="10">
				<sleep time="500"/>
				<action code="=($positionafter, CurrentPosition($mode))"/>
				<if test="notequal($positionbefore, $positionafter)">
					<break/>
				</if>
			</loop>
		</if>
		<action code="ComparePosition($positionbefore, $positionafter, $same)"/>
	</function>

	<!-- *************************************************************************************

		Detects if scanning restarts or not (for function with 4 parameters)

		Example:
			<action code="ScanRestart4('FocusDepth', 'B-Mode', 11, 15, -1)"/>

	************************************************************************************** -->
	<function name="ScanRestart4" inline="false" return="$same">
		<param name="$parameterfunction"/>
		<param name="$mode"/>
		<param name="$parametervalueA"/>
		<param name="$parametervalueB"/>
		<param name="$parametervalueC"/>
		
		<sleep time="2000"/>
		<action code="=($positionbefore, CurrentPosition($mode))"/>
		<action code="=($same, $parameterfunction($mode, $parametervalueA, $parametervalueB, $parametervalueC))"/>
		<action code="=($positionafter, CurrentPosition($mode))"/>
		<if test="equal($positionbefore, $positionafter)">
			<loop count="10">
				<sleep time="500"/>
				<action code="=($positionafter, CurrentPosition($mode))"/>
				<if test="notequal($positionbefore, $positionafter)">
					<break/>
				</if>
			</loop>
		</if>
		<action code="ComparePosition($positionbefore, $positionafter, $same)"/>
	</function>

	<!-- *************************************************************************************

		Boundary Test

		Example:
			<action code="Boundary('Acq/B-Mode/Display/Width', 'WidthDown')"/>

	************************************************************************************** -->
	<function name="Boundary" inline="false">
		<param name="$path"/>
		<param name="$key"/>

		<!-- when parameter value reaches its min/max, toggle the parameter key down/up one more time, the value should stay the same -->
		<pdm action="read" name="script:$path" return="$checkori"/>
		<cmd code="script:$key"/>
		<sleep time="1000"/>
		<pdm action="read" name="script:$path" return="$check"/>
		<if test="equal($checkori, $check)">
			<action code="=($logmsg, 'PASS! when parameter value reaches its min/max, ')"/>
			<action code="+=($logmsg, 'toggle the parameter key down/up one more time, ')"/>	
			<action code="+=($logmsg, 'the value stays the same as expected.')"/>	
			<log>script:$logmsg</log>
			<break/>
		</if>
		<if test="notequal($checkori, $check)">
			<action code="=($logmsg, 'FAIL! when parameter value reaches its min/max, toggle the parameter key down/up one more time, ')"/>
			<action code="+=($logmsg, 'the value should stay the same, but actually the parameter value was ')"/>	
			<action code="+=($logmsg, $checkori)"/>
			<action code="+=($logmsg, ', but it becomes ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
			<break/>
		</if>
	</function>

	<!-- *************************************************************************************

		Cauculate and verify frame rate in B-Mode (based on frame rate table values)

		Example:
			<action code="FrameRateTableB('Max', 21000000, 21000000, 11.0, 16.0, 23.04, 'Standard', 100.3)"/>

	************************************************************************************** -->
	<function name="FrameRateTableB" inline="false">
		<param name="$FRSetting"/>
		<param name="$TxFreq"/>	<!-- Hz -->
		<param name="$RxFreq"/>	<!-- Hz -->
		<param name="$FocusDepth"/>	<!-- mm -->
		<param name="$ImageDepth"/>	<!-- mm -->
		<param name="$ImageWidth"/>		<!-- mm -->
		<param name="$LineDensity"/>
		<param name="$BFR"/>

                <!-- set Sensitivity value -->
		<action code="Sensitivity('B-Mode', 0)"/>
		
		<!-- set Frame Rate Setting value -->
		<action code="FrameRateSetting6('B-Mode', $FRSetting)"/>

		<!-- set Receive Frequency value -->
		<action code="Frequency('B-Mode', $TxFreq, $RxFreq)"/>

		<!-- set Bottom of Display - Image Depth - value -->
		<action code="ImageDepth('B-Mode', $ImageDepth, 'in range')"/>

		<!-- set Display Width - Image Width -value -->
		<action code="ImageWidth('B-Mode', $ImageWidth)"/>

		<!-- set Single Focal Depth value -->
		<action code="FocalZones('B-Mode', 'Single', 0)"/>
		<action code="FocusDepth('B-Mode', $FocusDepth, -1, -1)"/>

		<!-- set Line Density value -->
		<action code="LineDensity2('B-Mode', $LineDensity)"/>

		<!-- read displayed Frame Rate -->
		<sleep time="1000"/>
		<pdm action="read" name="Acq/B-Mode/Scan/Frame-Rate-Acquisition-Acq-Disp" return="$check"/>

		<!-- 10% variance is acceptable for Frame Rate -->
		<action code="=($FRL, *($BFR, 0.95))"/>	<!-- Frame Rate low limit -->
		<action code="=($FRH, *($BFR, 1.05))"/>	<!-- Frame Rate high limit -->

		<!-- log: PASS! Expected B-Mode Frame Rate is xxx, and actual is xxx, which is within the 10% variance. -->
		<if test="and(or(greater($check, $FRL), equal($check, $FRL)), or(less($check, $FRH), equal($check, $FRH)))">
			<action code="=($logmsg, 'PASS! Expected B-Mode Frame Rate is ')"/>
			<action code="+=($logmsg, $BFR)"/>
			<action code="+=($logmsg, ', and actual is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ', which is within the 10% variance.')"/>
			<log>script:$logmsg</log>
		</if>

		<!-- log: FAIL! Expected B-Mode Frame Rate is xxx, but actual is xxx, which is outside the 10% variance. -->
		<if test="or(less($check, $FRL), greater($check, $FRH))">
			<action code="=($logmsg, 'FAIL! Expected B-Mode Frame Rate is ')"/>
			<action code="+=($logmsg, $BFR)"/>
			<action code="+=($logmsg, ', but actual is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ', which is outside the 10% variance.')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Turn [Frame Rate] knob sub function A (verify Frame Rate Setting and Frame Rate Display)

		Example:
			<action code="FrameRateSettingA($target, $targetno, $check)"/>
			<action code="FrameRateSettingA($target, $targetno, $checkori)"/>

	************************************************************************************** -->
	<function name="FrameRateSettingA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$targetno"/>
		<param name="$check"/>
		
		<action code="=($flag, 'FAIL stay')"/>
		<if test="equal($targetno, $check)">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Frame Rate Setting is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, ' as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Turn [Frame Rate] knob sub function B (move from current to target)

		Example:
			<action code="FrameRateSettingB($mode, $target, $targetno, 5)"/>	
			<action code="FrameRateSettingB($mode, $target, $targetno, 9)"/>	

	************************************************************************************** -->
	<function name="FrameRateSettingB" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>
		<param name="$targetno"/>
		<param name="$count"/>

		<!-- $path: Acq/$mode/Scan/Frame-Rate -->
		<action code="=($path, 'Acq/')"/>
		<action code="+=($path, $mode)"/>
		<action code="+=($path, '/Scan/Frame-Rate')"/>

		<!-- read current Frame Rate setting value -->
		<pdm action="read" name="script:$path" return="$checkori"/>
		<action code="changetype($checkori, 'ulong')"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="greater($targetno, $checkori)">
			<loop count="script:$count">
				<cmd code="FrameRateUp"/>
				<sleep time="3000"/> <!-- when frame rate is Min, i.e., 1 frame per second, we need longer sleep time-->
				<pdm action="read" name="script:$path" return="$check"/>
				<action code="changetype($check, 'ulong')"/>
				<if test="greater($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Turn [Frame Rate] knob clockwise should increase Frame Rate, ')"/>
					<action code="+=($logmsg, 'but actually it decreases Frame Rate! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, FrameRateSettingA($target, $targetno, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($targetno, $checkori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, FrameRateSettingA($target, $targetno, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="less($targetno, $checkori)">
			<loop count="script:$count">
				<cmd code="FrameRateDown"/>
				<sleep time="3000"/> <!-- when frame rate is Min, i.e., 1 frame per second, we need longer sleep time-->
				<pdm action="read" name="script:$path" return="$check"/>
				<action code="changetype($check, 'ulong')"/>
				<if test="less($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Turn [Frame Rate] knob counter-clockwise should decrease Frame Rate, ')"/>
					<action code="+=($logmsg, 'but actually it increases Frame Rate! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, FrameRateSettingA($target, $targetno, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected Frame Rate Setting which is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Turn [Frame Rate] knob sub function C (Log: Setting Frame Rate to $target in $mode...)

		Example:
			<action code="FrameRateSettingC($mode, $target)"/>	

	************************************************************************************** -->
	<function name="FrameRateSettingC" inline="false">
		<param name="$mode"/>
		<param name="$target"/>

		<action code="=($logmsg, 'Setting Frame Rate to ')"/>
		<action code="+=($logmsg, $target)"/>
		<action code="+=($logmsg, ' in ')"/>
		<action code="+=($logmsg, $mode)"/>
		<action code="+=($logmsg, '...')"/>
		<log>script:$logmsg</log>
	</function>

	<!-- *************************************************************************************

		Turn [Frame Rate] knob in B-Mode, Linear Contrast Mode, or PA-Mode

		Example:
			<action code="FrameRateSetting6('B-Mode', 'Min')"/>
			<action code="FrameRateSetting6('Contrast-Mode', 'Low')"/>
			<action code="FrameRateSetting6('Pa-Mode', 'Medium-Low')"/>
			<action code="FrameRateSetting6('B-Mode', 'Medium')"/>
			<action code="FrameRateSetting6('Contrast-Mode', 'High')"/>
			<action code="FrameRateSetting6('Pa-Mode', 'Max')"/>

	************************************************************************************** -->
	<function name="FrameRateSetting6" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>

		<!-- Log: Setting Frame Rate to $target in $mode... -->
		<action code="FrameRateSettingC($mode, $target)"/>	

		<!-- change target Frame Rate Setting from label to value -->
		<action code="=($targetno, 0)"/>
		<choose>
			<when test="equal($target, 'Min')">
				<action code="=($targetno, 5)"/>
			</when>
			<when test="equal($target, 'Low')">
				<action code="=($targetno, 10)"/>
			</when>
			<when test="equal($target, 'Medium-Low')">
				<action code="=($targetno, 25)"/>
			</when>
			<when test="equal($target, 'Medium')">
				<action code="=($targetno, 50)"/>
			</when>
			<when test="equal($target, 'High')">
				<action code="=($targetno, 100)"/>
			</when>
			<when test="equal($target, 'Max')">
				<action code="=($targetno, -1)"/>
			</when>
		</choose>
		<action code="changetype($targetno, 'ulong')"/>

		<action code="=($same, FrameRateSettingB($mode, $target, $targetno, 5))"/>
	</function>

	<!-- *************************************************************************************

		Turn [Frame Rate] knob in Nonlinear Contrast Mode

		Example:
			<action code="FrameRateSetting10('Adv-Contrast-Mode', 'Min: 1 fps max')"/>
			<action code="FrameRateSetting10('Adv-Contrast-Mode', 'Low: 5 fps max')"/>
			<action code="FrameRateSetting10('Adv-Contrast-Mode', 'Low: 10 fps max')"/>
			<action code="FrameRateSetting10('Adv-Contrast-Mode', 'Low-Med: 15 fps max')"/>
			<action code="FrameRateSetting10('Adv-Contrast-Mode', 'Low-Med: 20 fps max')"/>
			<action code="FrameRateSetting10('Adv-Contrast-Mode', 'Med: 25 fps max')"/>
			<action code="FrameRateSetting10('Adv-Contrast-Mode', 'Med: 30 fps max')"/>
			<action code="FrameRateSetting10('Adv-Contrast-Mode', 'High: 40 fps max')"/>
			<action code="FrameRateSetting10('Adv-Contrast-Mode', 'High: 50 fps max')"/>
			<action code="FrameRateSetting10('Adv-Contrast-Mode', 'Max')"/>

	************************************************************************************** -->
	<function name="FrameRateSetting10" inline="false"  return="$same">
		<param name="$mode"/>
		<param name="$target"/>

		<!-- Log: Setting Frame Rate to $target in $mode... -->
		<action code="FrameRateSettingC($mode, $target)"/>	

		<!-- change target Frame Rate Setting from label to value -->
		<action code="=($targetno, 0)"/>
		<choose>
			<when test="equal($target, 'Min: 1 fps max')">
				<action code="=($targetno, 1)"/>
			</when>
			<when test="equal($target, 'Low: 5 fps max')">
				<action code="=($targetno, 5)"/>
			</when>
			<when test="equal($target, 'Low: 10 fps max')">
				<action code="=($targetno, 10)"/>
			</when>
			<when test="equal($target, 'Low-Med: 15 fps max')">
				<action code="=($targetno, 15)"/>
			</when>
			<when test="equal($target, 'Low-Med: 20 fps max')">
				<action code="=($targetno, 20)"/>
			</when>
			<when test="equal($target, 'Med: 25 fps max')">
				<action code="=($targetno, 25)"/>
			</when>
			<when test="equal($target, 'Med: 30 fps max')">
				<action code="=($targetno, 30)"/>
			</when>
			<when test="equal($target, 'High: 40 fps max')">
				<action code="=($targetno, 40)"/>
			</when>
			<when test="equal($target, 'High: 50 fps max')">
				<action code="=($targetno, 50)"/>
			</when>
			<when test="equal($target, 'Max')">
				<action code="=($targetno, -1)"/>
			</when>
		</choose>
		<action code="changetype($targetno, 'ulong')"/>

		<action code="=($same, FrameRateSettingB($mode, $target, $targetno, 9))"/>
	</function>

	<!-- *************************************************************************************

		Get displayed Frame Rate number

		Example:
			<action code="FrameRate('Adv-Contrast-Mode')"/>
			<action code="FrameRate('B-Mode')"/>
			<action code="FrameRate('Contrast-Mode')"/>
			<action code="FrameRate('Pa-Mode')"/>

	************************************************************************************** -->
	<function name="FrameRate" inline="false" return="$checkdisp">
		<param name="$mode"/>	

		<!-- $pathdisp: Acq/$mode/Scan/Frame-Rate-Acquisition-Acq-Disp -->
		<action code="=($pathdisp, 'Acq/')"/>
		<action code="+=($pathdisp, $mode)"/>
		<action code="+=($pathdisp, '/Scan/Frame-Rate-Acquisition-Acq-Disp')"/>
		<!-- read current Frame Rate number -->
		<pdm action="read" name="script:$pathdisp" return="$checkdisp"/>
	</function>

	<!-- *************************************************************************************

		Check displayed Frame Rate is correct or not sub function A

		Example:
			<action code="FrameRateA($current, $target)"/>
			<action code="FrameRateA($current, $max)"/>

	************************************************************************************** -->
	<function name="FrameRateA" inline="false">
		<param name="$current"/>
		<param name="$expected"/>	

		<if test="equal($current, $expected)">
			<action code="=($logmsg, 'PASS! Displayed Frame Rate is ')"/>
			<action code="+=($logmsg, $current)"/>
			<action code="+=($logmsg, ', and expected Frame Rate is ')"/>
			<action code="+=($logmsg, $expected)"/>
			<action code="+=($logmsg, '.')"/>
			<log>script:$logmsg</log>
		</if>
		<if test="notequal($current, $expected)">
			<action code="=($logmsg, 'FAIL! Displayed Frame Rate is ')"/>
			<action code="+=($logmsg, $current)"/>
			<action code="+=($logmsg, ', but expected Frame Rate is ')"/>
			<action code="+=($logmsg, $expected)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Check displayed Frame Rate is correct or not (when Frame Rate Max > Frame Rate High)

		Example:
			<action code="FrameRateFast($FrameRate[0], 5, 'not max')"/>
			<action code="FrameRateFast($FrameRate[0], 100, 'max')"/>

	************************************************************************************** -->
	<function name="FrameRateFast" inline="false">
		<param name="$current"/>
		<param name="$target"/>
		<param name="$ifmax"/>	

		<if test="equal($ifmax, 'not max')">
			<action code="FrameRateA($current, $target)"/>
		</if>
		<if test="equal($ifmax, 'max')">
			<if test="greater($current, $target)">
				<action code="=($logmsg, 'PASS! Displayed Frame Rate is ')"/>
				<action code="+=($logmsg, $current)"/>
				<action code="+=($logmsg, ', and expected Frame Rate is larger than ')"/>
				<action code="+=($logmsg, $target)"/>
				<action code="+=($logmsg, '.')"/>
				<log>script:$logmsg</log>
			</if>
			<if test="or(less($current, $target), equal($current, $target))">
				<action code="=($logmsg, 'FAIL! Displayed Frame Rate is ')"/>
				<action code="+=($logmsg, $current)"/>
				<action code="+=($logmsg, ', but expected Frame Rate is larger than ')"/>
				<action code="+=($logmsg, $target)"/>
				<action code="+=($logmsg, '!')"/>
				<log level="error">script:$logmsg</log>
			</if>
		</if>
	</function>

	<!-- *************************************************************************************

		Check displayed Frame Rate is correct or not (when Frame Rate Max <= Frame Rate High)

		Example:
			<action code="FrameRateSlow($FrameRate[0], 5, $FrameRate[5], 'not max')"/>
			<action code="FrameRateSlow($FrameRate[5], 100, $FrameRate[5], 'max')"/>

	************************************************************************************** -->
	<function name="FrameRateSlow" inline="false">
		<param name="$current"/>
		<param name="$target"/>
		<param name="$max"/>
		<param name="$ifmax"/>	

		<if test="equal($ifmax, 'not max')">
			<if test="or(less($target, $max), equal($target, $max))">
				<action code="FrameRateA($current, $target)"/>
			</if>
			<if test="greater($target, $max)">
				<action code="FrameRateA($current, $max)"/>
			</if>
		</if>
		<if test="equal($ifmax, 'max')">
			<if test="or(less($current, $target), equal($current, $target))">
				<action code="=($logmsg, 'PASS! Displayed Frame Rate is ')"/>
				<action code="+=($logmsg, $current)"/>
				<action code="+=($logmsg, ', and expected Frame Rate is less than or equal to')"/>
				<action code="+=($logmsg, $target)"/>
				<action code="+=($logmsg, '.')"/>
				<log>script:$logmsg</log>
			</if>
			<if test="greater($current, $target)">
				<action code="=($logmsg, 'FAIL! Displayed Frame Rate is ')"/>
				<action code="+=($logmsg, $current)"/>
				<action code="+=($logmsg, ', but expected Frame Rate is less than or equal to ')"/>
				<action code="+=($logmsg, $target)"/>
				<action code="+=($logmsg, '!')"/>
				<log level="error">script:$logmsg</log>
			</if>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Line Density] key sub function A (verify Line Density value)

		Example:
			<action code="LineDensityA('Standard', 1, 2)"/>

	************************************************************************************** -->
	<function name="LineDensityA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$targetno"/>
		<param name="$check"/>
		
		<action code="=($flag, 'FAIL stay')"/>
		<if test="equal($targetno, $check)">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Line Density is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, ' as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Line Density] key in B-Mode, Linear Contrast Mode, and Nonlinear Contrast Mode

		Example:
			<action code="LineDensity2('B-Mode', 'Standard')"/>
			<action code="LineDensity2('Contrast-Mode', 'High')"/>

	************************************************************************************** -->
	<function name="LineDensity2" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>

		<action code="=($logmsg, 'Setting Line Density to ')"/>
		<action code="+=($logmsg, $target)"/>
		<if test="or(equal($mode, 'B-Mode'), equal($mode, 'Adv-Contrast-Mode'))">
			<action code="+=($logmsg, ' in ')"/>
			<action code="+=($logmsg, $mode)"/>
			<action code="+=($logmsg, '...')"/>
			<log>script:$logmsg</log>
		</if>
		<if test="equal($mode, 'Contrast-Mode')">
			<action code="+=($logmsg, ' in Linear Contrast Mode...')"/>
			<log>script:$logmsg</log>
		</if>

		<!-- change target Line Density from label to value -->
		<action code="=($targetno, 0)"/>
		<choose>
			<when test="equal($target, 'Standard')">
				<action code="=($targetno, 1)"/>
			</when>
			<when test="equal($target, 'High')">
				<action code="=($targetno, 2)"/>
			</when>
		</choose>

		<action code="=($path, 'Acq/')"/>
		<if test="or(equal($mode, 'B-Mode'), equal($mode, 'Adv-Contrast-Mode'))">
			<!-- $path: Acq/$mode/Scan/Line-Density -->
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/Scan/Line-Density')"/>
		</if>
		<if test="equal($mode, 'Contrast-Mode')">
			<!-- $path: Acq/B-Mode/Scan/Line-Density -->
			<action code="+=($path, 'B-Mode/Scan/Line-Density')"/>
		</if>

		<!-- read current Line Density value -->
		<pdm action="read" name="script:$path" return="$checkori"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="greater($targetno, $checkori)">
			<cmd code="LineDensityUp"/>
			<sleep time="1000"/>
			<pdm action="read" name="script:$path" return="$check"/>
			<if test="greater($checkori, $check)">
				<action code="=($logmsg, 'FAIL! Toggle [Line Density] key up should increase Line Density, ')"/>
				<action code="+=($logmsg, 'but actually it decreases Line Density! ')"/>
				<log level="error">script:$logmsg</log>
				<break/>
			</if>
			<action code="=($flag, LineDensityA($target, $targetno, $check))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="equal($targetno, $checkori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, LineDensityA($target, $targetno, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="less($targetno, $checkori)">
			<cmd code="LineDensityDown"/>
			<sleep time="1000"/>
			<pdm action="read" name="script:$path" return="$check"/>
			<if test="less($checkori, $check)">
				<action code="=($logmsg, 'FAIL! Toggle [Line Density] key down should decrease Line Density, ')"/>
				<action code="+=($logmsg, 'but actually it increases Line Density! ')"/>
				<log level="error">script:$logmsg</log>
				<break/>
			</if>
			<action code="=($flag, LineDensityA($target, $targetno, $check))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected Line Density which is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Line Density] key in Color Doppler Mode, and Power Doppler Mode

		Example:
			<action code="LineDensity5('Color-Mode', 'Full')"/>
			<action code="LineDensity5('Power-Mode', 'Half')"/>
			<action code="LineDensity5('Color-Mode', 'Third')"/>
			<action code="LineDensity5('Power-Mode', 'Quarter')"/>

	************************************************************************************** -->
	<function name="LineDensity5" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>

		<action code="=($logmsg, 'Setting Line Density to ')"/>
		<action code="+=($logmsg, $target)"/>
		<action code="+=($logmsg, ' in ')"/>
		<action code="+=($logmsg, $mode)"/>
		<action code="+=($logmsg, '...')"/>
		<log>script:$logmsg</log>

		<!-- change target Line Density from label to value -->
		<action code="=($targetno, 0)"/>
		<choose>
			<when test="equal($target, 'High')">
				<action code="=($targetno, 2)"/>
			</when>
			<when test="equal($target, 'Full')">
				<action code="=($targetno, 3)"/>
			</when>
			<when test="equal($target, 'Half')">
				<action code="=($targetno, 4)"/>
			</when>
			<when test="equal($target, 'Third')">
				<action code="=($targetno, 5)"/>
			</when>
			<when test="equal($target, 'Quarter')">
				<action code="=($targetno, 6)"/>
			</when>
		</choose>

		<!-- $path: Acq/$mode/Scan/Line-Density -->
		<action code="=($path, 'Acq/')"/>
		<action code="+=($path, $mode)"/>
		<action code="+=($path, '/Scan/Line-Density')"/>

		<!-- read current Line Density value -->
		<pdm action="read" name="script:$path" return="$checkori"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="less($targetno, $checkori)">
			<loop count="4">
				<cmd code="LineDensityUp"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="less($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Line Density] key up should increase Line Density, ')"/>
					<action code="+=($logmsg, 'but actually it decreases Line Density! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, LineDensityA($target, $targetno, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($targetno, $checkori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, LineDensityA($target, $targetno, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="greater($targetno, $checkori)">
			<loop count="4">
				<cmd code="LineDensityDown"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="greater($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Line Density] key down should decrease Line Density, ')"/>
					<action code="+=($logmsg, 'but actually it increases Line Density! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, LineDensityA($target, $targetno, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected Line Density which is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Image Depth] key sub function A (verify Image Depth value)

		Example:
			<action code="ImageDepthA(5, 6)"/>

	************************************************************************************** -->
	<function name="ImageDepthA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$check"/>
		
		<action code="=($flag, 'FAIL stay')"/>
		<if test="equal($target, $check)">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Image Depth is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, 'mm as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Image Depth] key

		Example:
			<action code="ImageDepth('B-Mode', 4, 'out of range')"/>
			<action code="ImageDepth('B-Mode', 5, 'in range')"/>

	************************************************************************************** -->
	<function name="ImageDepth" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>
		<param name="$range"/>

		<action code="=($logmsg, 'Setting Image Depth to ')"/>
		<action code="+=($logmsg, $target)"/>
		<if test="notequal($mode, 'M-Mode')">
			<action code="+=($logmsg, 'mm in ')"/>
			<action code="+=($logmsg, $mode)"/>
			<action code="+=($logmsg, '...')"/>
		</if>
		<if test="equal($mode, 'M-Mode')">
			<action code="+=($logmsg, 'mm...')"/>
		</if>
		<log>script:$logmsg</log>

		<!-- read current Image Depth value -->
		<pdm action="read" name="Acq/B-Mode/Display/Depth" return="$checkori"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="greater($target, $checkori)">
			<action code="=($checkorig, $checkori)"/>
			<loop count="36">
				<cmd code="DepthDown"/>
				<sleep time="2000"/>
				<if test="equal($mode, 'Pa-Mode')">
					<sleep time="1000"/>
				</if>
				<pdm action="read" name="Acq/B-Mode/Display/Depth" return="$check"/>
				<if test="greater($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Image Depth] key down should deeper Image Depth, ')"/>
					<action code="+=($logmsg, 'but actually it shallower Image Depth! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<!--$target is shallower than the shallowest Image Depth, or deeper than the deepest Image Depth -->
				<if test="equal($checkorig, $check)">
					<break/>
				</if>
				<if test="less($checkorig, $check)">
					<action code="=($checkorig, $check)"/>
				</if>
				<!--$target is in between of 2 connected Image Depths -->
				<if test="greater($check, $target)">
					<break/>
				</if>
				<!--$target is a reachable Image Depths -->
				<action code="=($flag, ImageDepthA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($target, $checkori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, ImageDepthA($target, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="less($target, $checkori)">
			<action code="=($checkorig, $checkori)"/>
			<loop count="36">
				<cmd code="DepthUp"/>
				<sleep time="2000"/>
				<if test="equal($mode, 'Pa-Mode')">
					<sleep time="1000"/>
				</if>
				<pdm action="read" name="Acq/B-Mode/Display/Depth" return="$check"/>
				<if test="less($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Image Depth] key down should shallower Image Depth, ')"/>
					<action code="+=($logmsg, 'but actually it deeper Image Depth! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<!--$target is shallower than the shallowest Image Depth, or deeper than the deepest Image Depth -->
				<if test="equal($checkorig, $check)">
					<break/>
				</if>
				<if test="greater($checkorig, $check)">
					<action code="=($checkorig, $check)"/>
				</if>
				<!--$target is in between of 2 connected Image Depths -->
				<if test="less($check, $target)">
					<break/>
				</if>
				<!--$target is a reachable Image Depths -->
				<action code="=($flag, ImageDepthA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="and(equal($flag, 'FAIL stay'), equal($range, 'out of range'))">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'PASS! Can NOT reach Image Depth ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, 'mm which is expected.')"/>
			<log>script:$logmsg</log>
		</if>
		<if test="and(equal($flag, 'FAIL stay'), equal($range, 'in range'))">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected Image Depth which is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, 'mm!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Focal Zones] key sub function A (verify Focal Zones value)

		Example:
			<action code="FocalZonesA('Tight Dual', 2, 2, 2.5, 2.5)"/>

	************************************************************************************** -->
	<function name="FocalZonesA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$targetno"/>
		<param name="$check"/>
		<param name="$targetdistance"/>
		<param name="$distance"/>
		
		<action code="=($flag, 'FAIL stay')"/>
		<if test="and(equal($targetno, $check), equal($targetdistance, $distance))">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Focal Zones is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, ' and the distance between focal zones is ')"/>
			<action code="+=($logmsg, $distance)"/>
			<action code="+=($logmsg, 'mm as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Focal Zones] key sub function B (calculate distance between focal zones)

		Example:
			<action code="FocalZonesB()"/>

	************************************************************************************** -->
	<function name="FocalZonesB" inline="false" return="$distance">

		<!-- $pathpos1: Acq/B-Mode/Scan/Focal-Zones-Pos1 -->
		<action code="=($pathpos1, 'Acq/B-Mode/Scan/Focal-Zones-Pos1')"/>
		<!-- $pathpos2: Acq/B-Mode/Scan/Focal-Zones-Pos2 -->
		<action code="=($pathpos2, 'Acq/B-Mode/Scan/Focal-Zones-Pos2')"/>
		<!-- $pathpos3: Acq/B-Mode/Scan/Focal-Zones-Pos3 -->
		<action code="=($pathpos3, 'Acq/B-Mode/Scan/Focal-Zones-Pos3')"/>

		<!-- read current Focal Zones position values -->
		<pdm action="read" name="script:$pathpos1" return="$pos1"/>
		<pdm action="read" name="script:$pathpos2" return="$pos2"/>
		<pdm action="read" name="script:$pathpos3" return="$pos3"/>	

		<action code="=($distance21, subtract($pos2, $pos1))"/>
		<action code="=($distance32, subtract($pos3, $pos2))"/>
		<action code="=($distance, 0.0)"/>
		<!-- Single -->
		<if test="and(less($distance21, 0), equal($distance32, 0))">
			<action code="=($distance, 0)"/>
		</if>
		<!-- Tight Dual or Dual -->
		<if test="and(greater($distance21, 0), less($distance32, 0))">
			<action code="=($distance, $distance21)"/>
		</if>
		<!-- Tight Triple or Triple -->
		<if test="and(greater($distance21, 0), greater($distance32, 0))">
			<if test="equal($distance21, $distance32)">
				<action code="=($distance, $distance21)"/>
			</if>
			<if test="notequal($distance21, $distance32)">
				<action code="=($logmsg, 'The distance between Focal-Zones-Pos2 and Focal-Zones-Pos1 is ')"/>
				<action code="+=($logmsg, $distance21)"/>
				<action code="+=($logmsg, 'mm, but the distance between Focal-Zones-Pos3 and Focal-Zones-Pos2 is ')"/>
				<action code="+=($logmsg, $distance32)"/>
				<action code="+=($logmsg, 'mm!')"/>
				<log level="error">script:$logmsg</log>
			</if>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Focal Zones] key sub function C (check focal zones count)

		Example:
			<action code="FocalZonesC()"/>

	************************************************************************************** -->
	<function name="FocalZonesC" inline="false" return="$check">

		<!-- read current Focal Zones value -->
		<pdm action="read" name="Acq/B-Mode/Scan/Focal-Zones-Count" return="$check"/>

	</function>

	<!-- *************************************************************************************

		Toggle [Focal Zones] key sub function D (change target Focal Zones from label to value)

		Example:
			<action code="FocalZonesD('Single')"/>

	************************************************************************************** -->
	<function name="FocalZonesD" inline="false" return="$targetno">
		<param name="$target"/>

		<!-- change target Line Density from label to value -->
		<action code="=($targetno, 0)"/>
		<choose>
			<when test="equal($target, 'Single')">
				<action code="=($targetno, 1)"/>
			</when>
			<when test="equal($target, 'Tight Dual')">
				<action code="=($targetno, 2)"/>
			</when>
			<when test="equal($target, 'Dual')">
				<action code="=($targetno, 2)"/>
			</when>
			<when test="equal($target, 'Tight Triple')">
				<action code="=($targetno, 3)"/>
			</when>
			<when test="equal($target, 'Triple')">
				<action code="=($targetno, 3)"/>
			</when>
		</choose>

	</function>

	<!-- *************************************************************************************

		Toggle [Focal Zones] key in B-Mode, Linear Contrast Mode and M/AM-Mode

		Example:
			<action code="FocalZones('Contrast-Mode', 'Single', 0)"/>
			<action code="FocalZones('B-Mode', 'Tight Dual', 2.5)"/>
			<action code="FocalZones('Contrast-Mode', 'Dual', 4)"/>
			<action code="FocalZones('B-Mode', 'Tight Triple', 2.5)"/>
			<action code="FocalZones('Contrast-Mode', 'Triple', 4)"/>

	************************************************************************************** -->
	<function name="FocalZones" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>
		<param name="$targetdistance"/>

		<action code="=($logmsg, 'Setting Focal Zones to ')"/>
		<action code="+=($logmsg, $target)"/>
		<if test="equal($mode, 'B-Mode')">
			<action code="+=($logmsg, ' in ')"/>
			<action code="+=($logmsg, $mode)"/>
			<action code="+=($logmsg, '...')"/>
			<log>script:$logmsg</log>
		</if>
		<if test="equal($mode, 'Contrast-Mode')">
			<action code="+=($logmsg, ' in Linear Contrast Mode...')"/>
			<log>script:$logmsg</log>
		</if>
		<if test="equal($mode, 'M-Mode')">
			<action code="+=($logmsg, '...')"/>
			<log>script:$logmsg</log>
		</if>

		<!-- change target Focal Zones from label to value -->
		<action code="=($targetno, FocalZonesD($target))"/>

		<!-- read current Focal Zones count and Focal Zones position distance -->
		<action code="=($checkori, FocalZonesC())"/>
		<action code="=($distanceori, FocalZonesB())"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="or(less($targetno, $checkori), and(equal($targetno, $checkori), less($targetdistance, $distanceori)))">
			<loop count="4">
				<cmd code="FocalZonesDown"/>
				<sleep time="1000"/>
				<action code="=($check, FocalZonesC())"/>
				<action code="=($distance, FocalZonesB())"/>
				<if test="or(less($checkori, $check), and(equal($checkori, $check), less($distanceori, $distance)))">
					<action code="=($logmsg, 'FAIL! Toggle [Focal Zones] key down should decrease Focal Zones, ')"/>
					<action code="+=($logmsg, 'but actually it increases Focal Zones! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, FocalZonesA($target, $targetno, $check, $targetdistance, $distance))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="and(equal($targetno, $checkori), equal($targetdistance, $distanceori))">
			<action code="=($same, 'same')"/>
			<action code="=($flag, FocalZonesA($target, $targetno, $checkori, $targetdistance, $distanceori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="or(greater($targetno, $checkori), and(equal($targetno, $checkori), greater($targetdistance, $distanceori)))">
			<loop count="4">
				<cmd code="FocalZonesUp"/>
				<sleep time="1000"/>
				<action code="=($check, FocalZonesC())"/>
				<action code="=($distance, FocalZonesB())"/>
				<if test="or(greater($checkori, $check), and(equal($checkori, $check), greater($distanceori, $distance)))">
					<action code="=($logmsg, 'FAIL! Toggle [Focal Zones] key up should increase Focal Zones, ')"/>
					<action code="+=($logmsg, 'but actually it decreases Focal Zones! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, FocalZonesA($target, $targetno, $check, $targetdistance, $distance))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected Focal Zones which is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Focal Zones] key up/down when the number of transmit focal zone reaches the top/bottom in the sequence.

		Example:
			<action code="FocalZonesToggle('B-Mode', 'Triple', 4)"/>

	************************************************************************************** -->
	<function name="FocalZonesToggle" inline="false">
		<param name="$mode"/>
		<param name="$target"/>
		<param name="$targetdistance"/>

		<!-- change target Focal Zones from label to value -->
		<action code="=($targetno, FocalZonesD($target))"/>

		<!-- read current Focal Zones count and Focal Zones position distance -->
		<action code="=($check, FocalZonesC())"/>
		<action code="=($distance, FocalZonesB())"/>

		<if test="and(equal($check, $targetno), equal($distance, $targetdistance))">
			<action code="=($logmsg, 'PASS! Once the number of transmit focal zone reaches the bottom in the sequence, ')"/>
			<action code="+=($logmsg, 'the next [Focal Zones] toggle down key switches to the top in the sequence.')"/>
			<log>script:$logmsg</log>
		</if>
		<if test="or(notequal($check, $targetno), notequal($distance, $targetdistance))">
			<action code="=($logmsg, 'FAIL! Once the number of transmit focal zone reaches the bottom in the sequence, ')"/>
			<action code="+=($logmsg, 'the next [Focal Zones] toggle down key should switche to the top in the sequence, but it does NOT! ')"/>
			<action code="+=($logmsg, 'Acq/B-Mode/Scan/Focal-Zones-Count(LC Mode uses B-Mode count)'')"/>
			<action code="+=($logmsg, '=')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ', and the distance between 2 focal zone positions is ')"/>
			<action code="+=($logmsg, $distance)"/>
			<action code="+=($logmsg, 'mm!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Focus Depth] key sub function A (verify Focus Depth value)

		Example:
			<action code="FocusDepthA(11, 15, -1, 10, 14, -1)"/>

	************************************************************************************** -->
	<function name="FocusDepthA" inline="false" return="$flag">
		<param name="$targetpos1"/>
		<param name="$targetpos2"/>
		<param name="$targetpos3"/>
		<param name="$checkpos1"/>
		<param name="$checkpos2"/>
		<param name="$checkpos3"/>

		<action code="=($flag, 'FAIL stay')"/>
		<if test="equal($targetpos1, $checkpos1)">
			<if test="equal($targetpos2, -1)">
				<action code="=($flag, 'PASS break')"/>
				<action code="=($logmsg, 'PASS! Current Focus Depth are ')"/>
				<action code="+=($logmsg, $checkpos1)"/>
				<action code="+=($logmsg, 'mm as expected.')"/>
				<log>script:$logmsg</log>
			</if>
			<if test="notequal($targetpos2, -1)">
				<if test="equal($targetpos2, $checkpos2)">
					<if test="equal($targetpos3, -1)">
						<action code="=($flag, 'PASS break')"/>
						<action code="=($logmsg, 'PASS! Current Focus Depth are ')"/>
						<action code="+=($logmsg, $checkpos1)"/>
						<action code="+=($logmsg, 'mm, ')"/>
						<action code="+=($logmsg, $checkpos2)"/>
						<action code="+=($logmsg, 'mm as expected.')"/>
						<log>script:$logmsg</log>
					</if>
				</if>
			</if>
			<if test="notequal($targetpos2, -1)">
				<if test="equal($targetpos2, $checkpos2)">
					<if test="notequal($targetpos3, -1)">
						<if test="equal($targetpos3, $checkpos3)">
							<action code="=($flag, 'PASS break')"/>
							<action code="=($logmsg, 'PASS! Current Focus Depth are ')"/>
							<action code="+=($logmsg, $checkpos1)"/>
							<action code="+=($logmsg, 'mm, ')"/>
							<action code="+=($logmsg, $checkpos2)"/>
							<action code="+=($logmsg, 'mm, ')"/>
							<action code="+=($logmsg, $checkpos3)"/>
							<action code="+=($logmsg, 'mm as expected.')"/>
							<log>script:$logmsg</log>
						</if>
					</if>
				</if>
			</if>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Focus Depth] key

		Example:
			<action code="FocusDepth('B-Mode', 11, 15, -1)"/>

	************************************************************************************** -->
	<function name="FocusDepth" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$targetpos1"/>
		<param name="$targetpos2"/>
		<param name="$targetpos3"/>
		
		<if test="and(notequal($mode, 'Contrast-Mode'), notequal($mode, 'M-Mode'))">
			<action code="=($logmsg, 'Setting Focus Depth to ')"/>
			<action code="+=($logmsg, $targetpos1)"/>
			<action code="+=($logmsg, 'mm, ')"/>
			<action code="+=($logmsg, $targetpos2)"/>
			<action code="+=($logmsg, 'mm, ')"/>
			<action code="+=($logmsg, $targetpos3)"/>
			<action code="+=($logmsg, 'mm in ')"/>
			<action code="+=($logmsg, $mode)"/>
			<action code="+=($logmsg, '...')"/>
			<log>script:$logmsg</log>
		</if>
		<if test="equal($mode, 'Contrast-Mode')">
			<action code="=($logmsg, 'Setting Focus Depth to ')"/>
			<action code="+=($logmsg, $targetpos1)"/>
			<action code="+=($logmsg, 'mm, ')"/>
			<action code="+=($logmsg, $targetpos2)"/>
			<action code="+=($logmsg, 'mm, ')"/>
			<action code="+=($logmsg, $targetpos3)"/>
			<action code="+=($logmsg, 'mm in Linear Contrast Mode...')"/>
			<log>script:$logmsg</log>
		</if>
		<if test="equal($mode, 'M-Mode')">
			<action code="=($logmsg, 'Setting Focus Depth to ')"/>
			<action code="+=($logmsg, $targetpos1)"/>
			<action code="+=($logmsg, 'mm, ')"/>
			<action code="+=($logmsg, $targetpos2)"/>
			<action code="+=($logmsg, 'mm, ')"/>
			<action code="+=($logmsg, $targetpos3)"/>
			<action code="+=($logmsg, 'mm...')"/>
			<log>script:$logmsg</log>
		</if>

		<action code="=($pathpos1, 'Acq/')"/>
		<action code="=($pathpos2, 'Acq/')"/>
		<action code="=($pathpos3, 'Acq/')"/>
		<if test="notequal($mode, 'Contrast-Mode')">
			<!-- $pathpos1: Acq/$mode/Scan/Focal-Zones-Pos1 -->
			<action code="+=($pathpos1, $mode)"/>
			<action code="+=($pathpos1, '/Scan/Focal-Zones-Pos1')"/>
			<if test="notequal($targetpos2, -1)">
				<!-- $pathpos2: Acq/$mode/Scan/Focal-Zones-Pos2 -->
				<action code="+=($pathpos2, $mode)"/>
				<action code="+=($pathpos2, '/Scan/Focal-Zones-Pos2')"/>
			</if>
			<if test="notequal($targetpos3, -1)">
				<!-- $pathpos3: Acq/$mode/Scan/Focal-Zones-Pos3 -->
				<action code="+=($pathpos3, $mode)"/>
				<action code="+=($pathpos3, '/Scan/Focal-Zones-Pos3')"/>
			</if>
		</if>
		<if test="equal($mode, 'Contrast-Mode')">
			<!-- $pathpos1: Acq/B-Mode/Scan/Focal-Zones-Pos1 -->
			<action code="+=($pathpos1, 'B-Mode/Scan/Focal-Zones-Pos1')"/>
			<if test="notequal($targetpos2, -1)">
				<!-- $pathpos2: Acq/B-Mode/Scan/Focal-Zones-Pos2 -->
				<action code="+=($pathpos2, 'B-Mode/Scan/Focal-Zones-Pos2')"/>
			</if>
			<if test="notequal($targetpos3, -1)">
				<!-- $pathpos3: Acq/B-Mode/Scan/Focal-Zones-Pos3 -->
				<action code="+=($pathpos3, 'B-Mode/Scan/Focal-Zones-Pos3')"/>
			</if>
		</if>

		<!-- read current Focal Zones position values -->
		<pdm action="read" name="script:$pathpos1" return="$checkoripos1"/>
		<action code="=($checkoripos2, -1)"/>
		<if test="notequal($targetpos2, -1)">
			<pdm action="read" name="script:$pathpos2" return="$checkoripos2"/>
		</if>
		<action code="=($checkoripos3, -1)"/>
		<if test="notequal($targetpos3, -1)">
			<pdm action="read" name="script:$pathpos3" return="$checkoripos3"/>
		</if>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="greater($targetpos1, $checkoripos1)">
			<loop count="36">
				<cmd code="FocusDepthDown"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$pathpos1" return="$checkpos1"/>
				<action code="=($checkpos2, -1)"/>
				<if test="notequal($targetpos2, -1)">
					<pdm action="read" name="script:$pathpos2" return="$checkpos2"/>
				</if>
				<action code="=($checkpos3, -1)"/>
				<if test="notequal($targetpos3, -1)">
					<pdm action="read" name="script:$pathpos3" return="$checkpos3"/>
				</if>	
				<if test="greater($checkoripos1, $checkpos1)">
					<action code="=($logmsg, 'FAIL! Toggle [Focus Depth] key down should increase Focus Depth, ')"/>
					<action code="+=($logmsg, 'but actually it decreases Focus Depth!')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<if test="and(equal($targetpos2, -1), equal($targetpos3, -1))">
					<action code="=($flag, FocusDepthA($targetpos1, $targetpos2, $targetpos3, $checkpos1, -1, -1))"/>
				</if>
				<if test="and(notequal($targetpos2, -1), equal($targetpos3, -1))">
					<action code="=($flag, FocusDepthA($targetpos1, $targetpos2, $targetpos3, $checkpos1, $checkpos2, -1))"/>
				</if>
				<if test="and(notequal($targetpos2, -1), notequal($targetpos3, -1))">
					<action code="=($flag, FocusDepthA($targetpos1, $targetpos2, $targetpos3, $checkpos1, $checkpos2, $checkpos3))"/>
				</if>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($targetpos1, $checkoripos1)">
			<if test="equal($targetpos2, -1)">
				<action code="=($same, 'same')"/>
				<action code="=($flag, FocusDepthA($targetpos1, $targetpos2, $targetpos3, $checkoripos1, -1, -1))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</if>
			<if test="notequal($targetpos2, -1)">
				<if test="equal($targetpos2, $checkoripos2)">
					<if test="equal($targetpos3, -1)">
						<action code="=($same, 'same')"/>
						<action code="=($flag, FocusDepthA($targetpos1, $targetpos2, $targetpos3, $checkoripos1, $checkoripos2, -1))"/>
						<if test="equal($flag, 'PASS break')">
							<break/>
						</if>
					</if>
				</if>
			</if>
			<if test="notequal($targetpos2, -1)">
				<if test="equal($targetpos2, $checkoripos2)">
					<if test="notequal($targetpos3, -1)">
						<if test="equal($targetpos3, $checkoripos3)">
							<action code="=($same, 'same')"/>
							<action code="=($flag, FocusDepthA($targetpos1, $targetpos2, $targetpos3, $checkoripos1, $checkoripos2, $checkoripos3))"/>
							<if test="equal($flag, 'PASS break')">
								<break/>
							</if>
						</if>
					</if>
				</if>
			</if>
		</if>
		<if test="less($targetpos1, $checkoripos1)">
			<loop count="36">
				<cmd code="FocusDepthUp"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$pathpos1" return="$checkpos1"/>
				<action code="=($checkpos2, -1)"/>
				<if test="notequal($targetpos2, -1)">
					<pdm action="read" name="script:$pathpos2" return="$checkpos2"/>
				</if>
				<action code="=($checkpos3, -1)"/>
				<if test="notequal($targetpos3, -1)">
					<pdm action="read" name="script:$pathpos3" return="$checkpos3"/>
				</if>
				<if test="less($checkoripos1, $checkpos1)">
					<action code="=($logmsg, 'FAIL! Toggle [Focus Depth] key up should decrease Focus Depth, ')"/>
					<action code="+=($logmsg, 'but actually it increases Focus Depth!')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<if test="and(equal($targetpos2, -1), equal($targetpos3, -1))">
					<action code="=($flag, FocusDepthA($targetpos1, $targetpos2, $targetpos3, $checkpos1, -1, -1))"/>
				</if>
				<if test="and(notequal($targetpos2, -1), equal($targetpos3, -1))">
					<action code="=($flag, FocusDepthA($targetpos1, $targetpos2, $targetpos3, $checkpos1, $checkpos2, -1))"/>
				</if>
				<if test="and(notequal($targetpos2, -1), notequal($targetpos3, -1))">
					<action code="=($flag, FocusDepthA($targetpos1, $targetpos2, $targetpos3, $checkpos1, $checkpos2, $checkpos3))"/>
				</if>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<if test="and(equal($targetpos2, -1), equal($targetpos3, -1))">
				<action code="=($logmsg, 'FAIL! Can NOT reach expected Focus Depth which are ')"/>
				<action code="+=($logmsg, $targetpos1)"/>
				<action code="+=($logmsg, 'mm!')"/>
				<log level="error">script:$logmsg</log>
			</if>
			<if test="and(notequal($targetpos2, -1), equal($targetpos3, -1))">
				<action code="=($logmsg, 'FAIL! Can NOT reach expected Focus Depth which are ')"/>
				<action code="+=($logmsg, $targetpos1)"/>
				<action code="+=($logmsg, 'mm, ')"/>
				<action code="+=($logmsg, $targetpos2)"/>
				<action code="+=($logmsg, 'mm!')"/>
				<log level="error">script:$logmsg</log>
			</if>
			<if test="and(notequal($targetpos2, -1), notequal($targetpos3, -1))">
				<action code="=($logmsg, 'FAIL! Can NOT reach expected Focus Depth which are ')"/>
				<action code="+=($logmsg, $targetpos1)"/>
				<action code="+=($logmsg, 'mm, ')"/>
				<action code="+=($logmsg, $targetpos2)"/>
				<action code="+=($logmsg, 'mm, ')"/>
				<action code="+=($logmsg, $targetpos3)"/>
				<action code="+=($logmsg, 'mm!')"/>
				<log level="error">script:$logmsg</log>
			</if>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Frequency] key sub function A (verify Tx/Rx Frequency value)

		Example:
			<action code="FrequencyA(16000000, 20000000, 21000000, 21000000)"/>

	************************************************************************************** -->
	<function name="FrequencyA" inline="false" return="$flag">
		<param name="$targettx"/>
		<param name="$targetrx"/>
		<param name="$checktx"/>
		<param name="$checkrx"/>

		<action code="=($flag, 'FAIL stay')"/>
		<if test="and(equal($targettx, $checktx), equal($targetrx, $checkrx))">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Transmit Frequency is ')"/>
			<action code="+=($logmsg, $checktx)"/>
			<action code="+=($logmsg, 'Hz, and Receive Frequency is ')"/>
			<action code="+=($logmsg, $checkrx)"/>
			<action code="+=($logmsg, 'Hz as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Frequency] key

		Example:
			<action code="Frequency('B-Mode', 16000000, 20000000)"/>

	************************************************************************************** -->
	<function name="Frequency" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$targettx"/>
		<param name="$targetrx"/>

		<action code="=($logmsg, 'Setting Transmit Frequency to ')"/>
		<action code="+=($logmsg, $targettx)"/>
		<action code="+=($logmsg, 'Hz, and Receive Frequency to ')"/>
		<action code="+=($logmsg, $targetrx)"/>
		<action code="+=($logmsg, 'Hz...')"/>
		<log>script:$logmsg</log>

		<action code="=($pathtx, 'Acq/')"/>
		<action code="=($pathrx, 'Acq/')"/>
		<if test="and(notequal($mode, 'Contrast-Mode'), notequal($mode, 'M-Mode'))">
			<!-- $pathtx: Acq/$mode/Tx/Frequency -->
			<action code="+=($pathtx, $mode)"/>
			<action code="+=($pathtx, '/Tx/Frequency')"/>
			<!-- $pathrx: Acq/$mode/Rx/Frequency -->
			<action code="+=($pathrx, $mode)"/>
			<action code="+=($pathrx, '/Rx/Frequency')"/>
		</if>
		<if test="or(equal($mode, 'Contrast-Mode'), equal($mode, 'M-Mode'))">
			<!-- $pathtx: Acq/B-Mode/Tx/Frequency -->
			<action code="+=($pathtx, 'B-Mode/Tx/Frequency')"/>
			<!-- $pathrx: Acq/B-Mode/Rx/Frequency -->
			<action code="+=($pathrx, 'B-Mode/Rx/Frequency')"/>
		</if>

		<!-- read current Tx/Rx Frequency values -->
		<pdm action="read" name="script:$pathtx" return="$checkoritx"/>
		<pdm action="read" name="script:$pathrx" return="$checkorirx"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="or(greater($targettx, $checkoritx), greater($targetrx, $checkorirx))">
			<loop count="2">
				<cmd code="TxFrequencyUp"/>
				<sleep time="2000"/>       <!--when 3 frequency in 1 mode it will be slower -->
				<pdm action="read" name="script:$pathtx" return="$checktx"/>
				<pdm action="read" name="script:$pathrx" return="$checkrx"/>
				<if test="or(greater($checkoritx, $checktx), greater($checkorirx, $checkrx))">
					<action code="=($logmsg, 'FAIL! Toggle [Frequency] key up should increase Frequency, ')"/>
					<action code="+=($logmsg, 'but actually it decreases Frequency!')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, FrequencyA($targettx, $targetrx, $checktx, $checkrx))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="and(equal($targettx, $checkoritx), equal($targetrx, $checkorirx))">
			<action code="=($same, 'same')"/>
			<action code="=($flag, FrequencyA($targettx, $targetrx, $checkoritx, $checkorirx))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="or(less($targettx, $checkoritx), less($targetrx, $checkorirx))">
			<loop count="2">
				<cmd code="TxFrequencyDown"/>
				<sleep time="2000"/>       <!--when 3 frequency in 1 mode it will be slower -->
				<pdm action="read" name="script:$pathtx" return="$checktx"/>
				<pdm action="read" name="script:$pathrx" return="$checkrx"/>
				<if test="or(less($checkoritx, $checktx), less($checkorirx, $checkrx))">
					<action code="=($logmsg, 'FAIL! Toggle [Frequency] key down should decrease Frequency, ')"/>
					<action code="+=($logmsg, 'but actually it increases Frequency!')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, FrequencyA($targettx, $targetrx, $checktx, $checkrx))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected Transmit Frequency ')"/>
			<action code="+=($logmsg, $targettx)"/>
			<action code="+=($logmsg, 'Hz, and Receive Frequency ')"/>
			<action code="+=($logmsg, $targetrx)"/>
			<action code="+=($logmsg, 'Hz!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Detect if the current transmit cycles value is within the range or not

		Example:
			<action code="TxCycles('B-Mode', 1, 2, 'same')"/>

	************************************************************************************** -->
	<function name="TxCycles" inline="false">
		<param name="$mode"/>
		<param name="$min"/>
		<param name="$max"/>
		<param name="$same"/>

        <if test="notequal($same, 'na')">
            <!-- $path: Acq/$mode/Tx/Cycles -->
    		<action code="=($path, 'Acq/')"/>
    		<action code="+=($path, $mode)"/>
    		<action code="+=($path, '/Tx/Cycles')"/>

    		<!-- read current transmit cycles value -->
    		<pdm action="read" name="script:$path" return="$check"/>

    		<if test="or(equal($min, $check), and(less($min, $check), greater($max, $check)), equal($max, $check))">
    			<action code="=($logmsg, 'PASS! Current transmit cycles value is ')"/>
    			<action code="+=($logmsg, $check)"/>
    			<action code="+=($logmsg, ' which is between range ')"/>
    			<action code="+=($logmsg, $min)"/>
    			<action code="+=($logmsg, ' and ')"/>
    			<action code="+=($logmsg, $max)"/>
    			<action code="+=($logmsg, '.')"/>
    			<log>script:$logmsg</log>
    		</if>

    		<if test="or(greater($min, $check), less($max, $check))">
    			<action code="=($logmsg, 'FAIL! Current transmit cycles value is ')"/>
    			<action code="+=($logmsg, $check)"/>
    			<action code="+=($logmsg, ' which is outside range ')"/>
    			<action code="+=($logmsg, $min)"/>
    			<action code="+=($logmsg, ' and ')"/>
    			<action code="+=($logmsg, $max)"/>
    			<action code="+=($logmsg, '!')"/>
    			<log level="error">script:$logmsg</log>
    		</if>
        </if>
	</function>

	<!-- *************************************************************************************

		Turn [Transmit Power] knob sub function A (verify Transmit Power value)

		Example:
			<action code="TxPowerA(8, 10)"/>

	************************************************************************************** -->
	<function name="TxPowerA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$check"/>
		
		<action code="=($flag, 'FAIL stay')"/>
		<if test="equal($target, $check)">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Transmit Power is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, '% as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Turn [Transmit Power] knob

		Example:
			<action code="TxPower('B-Mode', 20)"/>

	************************************************************************************** -->
	<function name="TxPower" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>

		<action code="=($logmsg, 'Setting Transmit Power to ')"/>
		<action code="+=($logmsg, $target)"/>
		<if test="notequal($mode, 'M-Mode')">
			<action code="+=($logmsg, '% in ')"/>
			<action code="+=($logmsg, $mode)"/>
			<action code="+=($logmsg, '...')"/>
		</if>
		<if test="equal($mode, 'M-Mode')">
			<action code="+=($logmsg, '%...')"/>
		</if>
		<log>script:$logmsg</log>

		<!-- $path: Acq/$mode/Tx/Power -->
		<action code="=($path, 'Acq/')"/>
		<if test="notequal($mode, 'M-Mode')">
		    <action code="+=($path, $mode)"/>
		</if>
		<if test="equal($mode, 'M-Mode')">
		    <action code="+=($path, 'B-Mode')"/>
		</if>
		<action code="+=($path, '/Tx/Power')"/>
		<!-- read current Transmit Power value -->
		<pdm action="read" name="script:$path" return="$checkori"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="greater($target, $checkori)">
			<loop count="18">
				<cmd code="TxPowerUp"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="greater($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Transmit Power] key up should increase Transmit Power, ')"/>
					<action code="+=($logmsg, 'but actually it decreases Transmit Power! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, TxPowerA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($target, $checkori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, TxPowerA($target, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="less($target, $checkori)">
			<action code="=($checkorig, $checkori)"/>
			<loop count="18">
				<cmd code="TxPowerDown"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="less($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Transmit Power] key down should decrease Transmit Power, ')"/>
					<action code="+=($logmsg, 'but actually it increases Transmit Power! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<!--$target is unreachable since both vpulser1 and vpulser2 can not go below 3 volts (1.73% variance) -->
				<if test="equal($checkorig, $check)">
					<break/>
				</if>
				<if test="greater($checkorig, $check)">
					<action code="=($checkorig, $check)"/>
				</if>
				<action code="=($flag, TxPowerA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($check[], 0.0)"/>
			<!-- check the real voltage value $V-->
			<if test="or(equal($mode, 'B-Mode'), equal($mode, 'Contrast-Mode'), equal($mode, 'M-Mode'), equal($mode, 'Pa-Mode'))">
				<!-- First, you need to do a dcm read to read from hardware -->
				<dcm action="read" name="Hardware/Tx/HwTxCbCommon/VP-Mode1"/>
				<!-- Then, a pdm read into variable, VP-Mode1 is a memory type and so you need to define it is ulong and store it in an array -->
				<pdm action="read" name="Hardware/Tx/HwTxCbCommon/VP-Mode1" type="ulong" return="$check[]"/>
			</if>
			<if test="or(equal($mode, 'Color-Mode'), equal($mode, 'Power-Mode'), equal($mode, 'Pw-Mode'), equal($mode, 'Pw-Tissue-Mode'), equal($mode, 'Adv-Contrast-Mode')">
				<!-- First, you need to do a dcm read to read from hardware -->
				<dcm action="read" name="Hardware/Tx/HwTxCbCommon/VP-Mode2"/>
				<!-- Then, a pdm read into variable, VP-Mode2 is a memory type and so you need to define it is ulong and store it in an array -->
				<pdm action="read" name="Hardware/Tx/HwTxCbCommon/VP-Mode2" type="ulong" return="$check[]"/>
			</if>
			<!-- Next, the byte orders are different on the Power PC (big endian) and computer (Intel little endian) -->
			<action code="=($check, byteswapulong($check))"/>
			<!-- Next, the voltage is contains between bit 0 to bit 7, zero out bit 8 & 9 -->
			<action code="=($check, bitwiseAnd($check, 255))"/>	
			<!-- Decode Voltage $V= $check * 40.2696 / 255.0 -->
			<action code="changetype($check, 'double')"/>
			<action code="=($check, multiply($check, 40.2696))"/>
			<action code="=($V, divide($check, 255.0))"/>
			<!-- check the max voltage value $Vmax-->
			<!-- $pathVmax: Acq/$mode/Tx/Voltage-Max -->
			<action code="=($pathVmax, 'Acq/')"/>
			<action code="+=($pathVmax, $mode)"/>
			<action code="+=($pathVmax, '/Tx/Voltage-Max')"/>
			<!-- read current Max Voltage value -->
			<pdm action="read" name="script:$pathVmax" return="$Vmax"/>
			<!-- minimum reachable Power = (V/Vmax)2-->
			<action code="=($check, divide($V, $Vmax))"/>
			<action code="=($check, pow($check, 2))"/>
			<action code="=($Power, multiply($check, 100))"/>
			<!-- First, you need to do a dcm read to read from hardware -->
			<dcm action="read" name="Hardware/Control/HwPwrMgr/Power-Values"/>
			<!-- Then, a pdm read into variable, Power-Values is a memory type and so you need to define type float and store it in an array -->
			<pdm action="read" name="Hardware/Control/HwPwrMgr/Power-Values" type="float" return="$c[]"/>
			<!-- Next, the byte orders are different on the Power PC (big endian) and computer (Intel little endian) -->
			<action code="=($c21, byteswap($c[21]))"/>
			<action code="=($c22, byteswap($c[22]))"/>
			<!--vpulser1 >= vpulser2, & vpulser1 is for B-Mode based mode, & vpulser2 is for Doppler mode -->
			<if test="and(less($target, $Power), or(greater($c21, $c22), equal($c21, $c22)), greater($c21, 2.948))">
				<action code="=($logmsg, 'PASS! Can NOT reach expected Transmit Power which is ')"/>
				<action code="+=($logmsg, $target)"/>
				<action code="+=($logmsg, '% since minimum reachable Transmit Power is ')"/>
				<action code="+=($logmsg, $Power)"/>
				<action code="+=($logmsg, '%, and both vpulser1=')"/>
				<action code="+=($logmsg, $c21)"/>
				<action code="+=($logmsg, $c21)"/>
				<action code="+=($logmsg, 'Volts and vpulser2=')"/>
				<action code="+=($logmsg, $c22)"/>
				<action code="+=($logmsg, 'Volts are above 3 volts.')"/>
				<log>script:$logmsg</log>
			</if>
			<if test="greater($target, $Power)">
				<action code="=($logmsg, 'FAIL! Can NOT reach expected Transmit Power ')"/>
				<action code="+=($logmsg, $target)"/>
				<action code="+=($logmsg, '% which is bigger than the minimum reachable Transmit Power is ')"/>
				<action code="+=($logmsg, $Power)"/>
				<action code="+=($logmsg, '%!)"/>
				<log level="error">script:$logmsg</log>
			</if>
			<if test="less($c21, 2.948)">
				<action code="=($logmsg, 'FAIL! Can NOT reach expected Transmit Power which is ')"/>
				<action code="+=($logmsg, $target)"/>
				<action code="+=($logmsg, '%! Current vpulser1=')"/>
				<action code="+=($logmsg, $c21)"/>
				<action code="+=($logmsg, 'Volts which should NOT be less than 3 Volts!')"/>
				<log level="error">script:$logmsg</log>
			</if>
			<action code="=($c222, subtract($c22, 0.5))"/>
			<if test="less($c21, $c222)">
				<action code="=($logmsg, 'FAIL! Can NOT reach expected Transmit Power which is ')"/>
				<action code="+=($logmsg, $target)"/>
				<action code="+=($logmsg, '%! Current vpulser1=')"/>
				<action code="+=($logmsg, $c21)"/>
				<action code="+=($logmsg, 'Volts which should NOT be less than vpulser2=')"/>
				<action code="+=($logmsg, $c22)"/>
				<action code="+=($logmsg, 'Volts - 0.5Volts!')"/>
				<log level="error">script:$logmsg</log>
			</if>
		</if>
	</function>

	<!-- *************************************************************************************

		Caculate real voltage value for B-Mode

		Example:
			<action code="VoltageB('B-Mode', $same)"/>

	************************************************************************************** -->
	<function name="VoltageB" inline="false">
		<param name="$mode"/>
		<param name="$same"/>

		<if test="notequal($same, 'na')">			
			<!-- check the real voltage value $V-->
			<!-- First, you need to do a dcm read to read from hardware -->
			<dcm action="read" name="Hardware/Tx/HwTxCbCommon/VP-Mode1"/>
			<!-- Then, a pdm read into variable, VP-Mode1 is a memory type and so you need to define it is ulong and store it in an array -->
			<pdm action="read" name="Hardware/Tx/HwTxCbCommon/VP-Mode1" type="ulong" return="$check[]"/>
			<!-- Next, the byte orders are different on the Power PC (big endian) and computer (Intel little endian) -->
			<action code="=($check, byteswapulong($check))"/>
			<!-- Next, the voltage is contains between bit 0 to bit 7, zero out bit 8 & 9 -->
			<action code="=($check, bitwiseAnd($check, 255))"/>	
			<!-- Decode Voltage $V= $check * 40.2696 / 255.0 -->
			<action code="changetype($check, 'double')"/>
			<action code="=($check, multiply($check, 40.2696))"/>
			<action code="=($V, divide($check, 255.0))"/>
	
			<!-- check the max voltage value $Vmax-->
			<!-- $path: Acq/$mode/Tx/Voltage-Max -->
			<action code="=($path, 'Acq/')"/>
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/Tx/Voltage-Max')"/>
			<pdm action="read" name="script:$path" return="$Vmax"/>
			<action code="changetype($Vmax, 'double')"/>
	
			<!-- check the Tx Power value $Power-->
			<!-- $path: Acq/$mode/Tx/Power -->
			<action code="=($path, 'Acq/')"/>
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/Tx/Power')"/>
			<pdm action="read" name="script:$path" return="$check"/>
			<action code="changetype($check, 'double')"/>
			<action code="=($Power, divide($check, 100.0))"/>
	
			<!-- $V = $Vmax * sqrt($Power) -->
			<action code="=($check, sqrt($Power))"/>
			<action code="=($check, multiply($Vmax, $check))"/>
			<!-- 10% variance is acceptable -->
			<action code="=($VL, *($V, 0.95))"/>	<!-- Voltage low limit -->
			<action code="=($VH, *($V, 1.05))"/>	<!-- Voltage high limit -->
			<if test="and(or(greater($check, $VL), equal($check, $VL)), or(less($check, $VH), equal($check, $VH)))">
				<action code="=($logmsg, 'PASS! V = Vmax * sqrt(Power) as expected. Real voltage value V is ')"/>
				<action code="+=($logmsg, $V)"/>
				<action code="+=($logmsg, 'v, and Vmax * sqrt(Power) = ')"/>
				<action code="+=($logmsg, $check)"/>
				<action code="+=($logmsg, 'v. Max voltage value Vmax is ')"/>
				<action code="+=($logmsg, $Vmax)"/>
				<action code="+=($logmsg, 'v. Transmit Power value Power is ')"/>
				<action code="+=($logmsg, $Power)"/>
				<action code="+=($logmsg, '.')"/>
				<log>script:$logmsg</log>
			</if>
			<if test="or(less($check, $VL), greater($check, $VH))">
				<action code="=($logmsg, 'FAIL! V != Vmax * sqrt(Power)! Real voltage value V is ')"/>
				<action code="+=($logmsg, $V)"/>
				<action code="+=($logmsg, 'v, but Vmax * sqrt(Power) = ')"/>
				<action code="+=($logmsg, $check)"/>
				<action code="+=($logmsg, 'v! Max voltage value Vmax is ')"/>
				<action code="+=($logmsg, $Vmax)"/>
				<action code="+=($logmsg, 'v. Transmit Power value Power is ')"/>
				<action code="+=($logmsg, $Power)"/>
				<action code="+=($logmsg, '.')"/>
				<log level="error">script:$logmsg</log>
				<break/>
			</if>
		</if>
	</function>

	<!-- *************************************************************************************

		Detect if the current TXAE/TXAH/TXAM/TXB value is as expected or not

		Example:
			<action code="TxValues('B-Mode', 'TXAE', 0)"/>
			<action code="TxValues('B-Mode', 'TXAH', 63)"/>
			<action code="TxValues('B-Mode', 'TXAM', 63)"/>
			<action code="TxValues('B-Mode', 'TXB', 63)"/>

	************************************************************************************** -->
	<function name="TxValues" inline="false">
		<param name="$mode"/>
		<param name="$parameter"/>
		<param name="$expected"/>

		<!-- $path: Acq/$mode/Tx/TXAE -->
		<action code="=($path, 'Acq/')"/>
		<action code="+=($path, $mode)"/>
		<action code="+=($path, '/Tx/')"/>
		<action code="+=($path, $parameter)"/>

		<!-- read current TXAE value -->
		<pdm action="read" name="script:$path" return="$check"/>

		<if test="equal($expected, $check)">
			<action code="=($logmsg, 'PASS! Current ')"/>
			<action code="+=($logmsg, $parameter)"/>
			<action code="+=($logmsg, ' value is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ' as expected.')"/>
			<log>script:$logmsg</log>
		</if>

		<if test="notequal($expected, $check)">
			<action code="=($logmsg, 'FAIL! Current ')"/>
			<action code="+=($logmsg, $parameter)"/>
			<action code="+=($logmsg, ' value is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ', but the expected ')"/>
			<action code="+=($logmsg, $parameter)"/>
			<action code="+=($logmsg, ' value is ')"/>
			<action code="+=($logmsg, $expected)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Loop among all available parameter values by step size (no need to test scan restarts or not),
		 i.e., Toggle [2D Gain] key sub function. 

		Example:
			<action code="LoopParameter($min, $max, $step, $BoundaryUp, $BoundaryDown, $path, '2D Gain', 'dB', 'RxGainUp', 'RxGainDown')"/>

	************************************************************************************** -->
	<function name="LoopParameter" inline="false">
		<param name="$min"/>
		<param name="$max"/>
		<param name="$step"/>
		<param name="$BoundaryUp"/>
		<param name="$BoundaryDown"/>
		<param name="$path"/>
		<param name="$ParameterName"/>
		<param name="$ParameterUnit"/>
		<param name="$ParameterKeyUp"/>
		<param name="$ParameterKeyDown"/>

		<!-- read current $ParameterName value -->
		<pdm action="read" name="script:$path" return="$checkori"/>

		<if test="or(greater($min, $checkori), less($max, $checkori))">
			<action code="=($logmsg, 'FAIL! Current ')"/>
			<action code="+=($logmsg, $ParameterName)"/>
			<action code="+=($logmsg, ' is ')"/>
			<action code="+=($logmsg, $checkori)"/>
			<action code="+=($logmsg, $ParameterUnit)"/>
			<action code="+=($logmsg, ' which is outside expected ')"/>
			<action code="+=($logmsg, $ParameterName)"/>
			<action code="+=($logmsg, ' range ')"/>
			<action code="+=($logmsg, $min)"/>
			<action code="+=($logmsg, $ParameterUnit)"/>
			<action code="+=($logmsg, ' and ')"/>
			<action code="+=($logmsg, $max)"/>
			<action code="+=($logmsg, $ParameterUnit)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>
		<if test="and(or(equal($min, $checkori), less($min, $checkori)), or(greater($max, $checkori), equal($max, $checkori)))">
			<!-- Move $ParameterName from its original value to its minimum value -->
			<action code="=($logmsg, 'Moving ')"/>
			<action code="+=($logmsg, $ParameterName)"/>
			<action code="+=($logmsg, ' from its original value ')"/>
			<action code="+=($logmsg, $checkori)"/>
			<action code="+=($logmsg, $ParameterUnit)"/>
			<action code="+=($logmsg, ' to its minimum value ')"/>
			<action code="+=($logmsg, $min)"/>
			<action code="+=($logmsg, $ParameterUnit)"/>
			<action code="+=($logmsg, ' by step size ')"/>
			<action code="+=($logmsg, $step)"/>
			<action code="+=($logmsg, $ParameterUnit)"/>
			<action code="+=($logmsg, '...')"/>
			<log>script:$logmsg</log>
			<if test="less($min, $checkori)">
				<action code="=($count, divide(subtract($checkori, $min), $step))"/>
				<action code="changetype($count, 'ulong')"/>
				<loop count="script:$count">
					<cmd code="script:$ParameterKeyDown"/>
					<sleep time="1000"/>
					<pdm action="read" name="script:$path" return="$check"/>
					<if test="less($checkori, $check)">
						<action code="=($logmsg, 'FAIL! Toggle [')"/>
						<action code="+=($logmsg, $ParameterName)"/>
						<action code="+=($logmsg, '] key down should decrease ')"/>
						<action code="+=($logmsg, $ParameterName)"/>
						<action code="+=($logmsg, ', but actually it increases ')"/>
						<action code="+=($logmsg, $ParameterName)"/>
						<action code="+=($logmsg, '! ')"/>
						<log level="error">script:$logmsg</log>
						<break/>
					</if>
				</loop>
			</if>
			<pdm action="read" name="script:$path" return="$check"/>
			<action code="=($diff, subtract($min, $check))"/>
                        <action code="=($diff, abs($diff))"/>
                        <action code="changetype($diff, 'double')"/>
		        <if test="less($diff, 0.0001)">		<!-- if $min = $check -->
				<action code="=($logmsg, 'PASS! The ')"/>
				<action code="+=($logmsg, $ParameterName)"/>
				<action code="+=($logmsg, ' reaches its minimum value ')"/>
				<action code="+=($logmsg, $check)"/>
				<action code="+=($logmsg, $ParameterUnit)"/>
				<action code="+=($logmsg, '.')"/>
				<log>script:$logmsg</log>
			</if>
			<if test="greater($diff, 0.0001)">       <!-- if $min != $check -->
				<action code="=($logmsg, 'FAIL! The ')"/>
				<action code="+=($logmsg, $ParameterName)"/>
				<action code="+=($logmsg, ' does NOT reach its minimum value ')"/>
				<action code="+=($logmsg, $min)"/>
				<action code="+=($logmsg, $ParameterUnit)"/>
				<action code="+=($logmsg, '! Current ')"/>
				<action code="+=($logmsg, $ParameterName)"/>
				<action code="+=($logmsg, ' value is ')"/>
				<action code="+=($logmsg, $check)"/>
				<action code="+=($logmsg, $ParameterUnit)"/>
				<action code="+=($logmsg, '!')"/>
				<log level="error">script:$logmsg</log>
				<break/>
			</if>
			<!-- Move $ParameterName from its minimum value to its maximum value per step size-->
			<action code="=($logmsg, 'Moving ')"/>
			<action code="+=($logmsg, $ParameterName)"/>
			<action code="+=($logmsg, ' from its minimum value ')"/>
			<action code="+=($logmsg, $min)"/>
			<action code="+=($logmsg, $ParameterUnit)"/>
			<action code="+=($logmsg, ' to its maximum value ')"/>
			<action code="+=($logmsg, $max)"/>
			<action code="+=($logmsg, $ParameterUnit)"/>
			<action code="+=($logmsg, ' by step size ')"/>
			<action code="+=($logmsg, $step)"/>
			<action code="+=($logmsg, $ParameterUnit)"/>
			<action code="+=($logmsg, '...')"/>
			<log>script:$logmsg</log>
			<action code="=($count, divide(subtract($max, $min), $step))"/>
			<action code="changetype($count, 'ulong')"/>
			<loop count="script:$count">
				<pdm action="read" name="script:$path" return="$checkori"/>
				<cmd code="script:$ParameterKeyUp"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="notequal($check, add($checkori, $step))">
					<action code="=($logmsg, 'FAIL! Toggle [')"/>
					<action code="+=($logmsg, $ParameterName)"/>
					<action code="+=($logmsg, '] key up should increase ')"/>
					<action code="+=($logmsg, $ParameterName)"/>
					<action code="+=($logmsg, ' by ')"/>
					<action code="+=($logmsg, $step)"/>
					<action code="+=($logmsg, $ParameterUnit)"/>
					<action code="+=($logmsg, ' but actually it does NOT! ')"/>
					<action code="+=($logmsg, 'Original ')"/>
					<action code="+=($logmsg, $ParameterName)"/>
					<action code="+=($logmsg, ' was ')"/>
					<action code="+=($logmsg, $checkori)"/>
					<action code="+=($logmsg, $ParameterUnit)"/>
					<action code="+=($logmsg, ', and Step Size is ')"/>
					<action code="+=($logmsg, $step)"/>
					<action code="+=($logmsg, $ParameterUnit)"/>
					<action code="+=($logmsg, ', but current ')"/>
					<action code="+=($logmsg, $ParameterName)"/>
					<action code="+=($logmsg, ' is ')"/>
					<action code="+=($logmsg, $check)"/>
					<action code="+=($logmsg, $ParameterUnit)"/>
					<action code="+=($logmsg, '!')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
			</loop>
			<pdm action="read" name="script:$path" return="$check"/>
			<action code="=($diff, subtract($max, $check))"/>
                        <action code="=($diff, abs($diff))"/>
                        <action code="changetype($diff, 'double')"/>
		        <if test="less($diff, 0.0001)">		<!-- if $max = $check -->
				<action code="=($logmsg, 'PASS! The ')"/>
				<action code="+=($logmsg, $ParameterName)"/>
				<action code="+=($logmsg, ' reaches its maximum value ')"/>
				<action code="+=($logmsg, $check)"/>
				<action code="+=($logmsg, $ParameterUnit)"/>
				<action code="+=($logmsg, '.')"/>
				<log>script:$logmsg</log>
				<!-- when $ParameterName reaches its max value, toggle the [$ParameterName] key up one more time, the value should stay at max -->
				<if test="equal($BoundaryUp, 'yes')">
					<action code="Boundary($path, $ParameterKeyUp)"/>
				</if>
			</if>
			<if test="greater($diff, 0.0001)">		<!-- if $max != $check -->
				<action code="=($logmsg, 'FAIL! The ')"/>
				<action code="+=($logmsg, $ParameterName)"/>
				<action code="+=($logmsg, ' does NOT reach its maximum value ')"/>
				<action code="+=($logmsg, $max)"/>
				<action code="+=($logmsg, $ParameterUnit)"/>
				<action code="+=($logmsg, '! Current ')"/>
				<action code="+=($logmsg, $ParameterName)"/>
				<action code="+=($logmsg, ' value is ')"/>
				<action code="+=($logmsg, $check)"/>
				<action code="+=($logmsg, $ParameterUnit)"/>
				<action code="+=($logmsg, '!')"/>
				<log level="error">script:$logmsg</log>
				<break/>
			</if>
			<!-- Move $ParameterName from its maximum value to its minimum value per step size-->
			<action code="=($logmsg, 'Moving ')"/>
			<action code="+=($logmsg, $ParameterName)"/>
			<action code="+=($logmsg, ' from its maximum value ')"/>
			<action code="+=($logmsg, $max)"/>
			<action code="+=($logmsg, $ParameterUnit)"/>
			<action code="+=($logmsg, ' to its minimum value ')"/>
			<action code="+=($logmsg, $min)"/>
			<action code="+=($logmsg, $ParameterUnit)"/>
			<action code="+=($logmsg, ' by step size ')"/>
			<action code="+=($logmsg, $step)"/>
			<action code="+=($logmsg, $ParameterUnit)"/>
			<action code="+=($logmsg, '...')"/>
			<log>script:$logmsg</log>
			<action code="=($count, divide(subtract($max, $min), $step))"/>
			<action code="changetype($count, 'ulong')"/>
			<loop count="script:$count">
				<pdm action="read" name="script:$path" return="$checkori"/>
				<cmd code="script:$ParameterKeyDown"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="notequal($check, subtract($checkori, $step))">
					<action code="=($logmsg, 'FAIL! Toggle [')"/>
					<action code="+=($logmsg, $ParameterName)"/>
					<action code="+=($logmsg, '] key down should decrease ')"/>
					<action code="+=($logmsg, $ParameterName)"/>
					<action code="+=($logmsg, ' by ')"/>
					<action code="+=($logmsg, $step)"/>
					<action code="+=($logmsg, $ParameterUnit)"/>
					<action code="+=($logmsg, ' but actually it does NOT! ')"/>
					<action code="+=($logmsg, 'Original ')"/>
					<action code="+=($logmsg, $ParameterName)"/>
					<action code="+=($logmsg, ' was ')"/>
					<action code="+=($logmsg, $checkori)"/>
					<action code="+=($logmsg, $ParameterUnit)"/>
					<action code="+=($logmsg, ', and Step Size is ')"/>
					<action code="+=($logmsg, $step)"/>
					<action code="+=($logmsg, $ParameterUnit)"/>
					<action code="+=($logmsg, ', but current ')"/>
					<action code="+=($logmsg, $ParameterName)"/>
					<action code="+=($logmsg, ' is ')"/>
					<action code="+=($logmsg, $check)"/>
					<action code="+=($logmsg, $ParameterUnit)"/>
					<action code="+=($logmsg, '!')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
			</loop>
			<pdm action="read" name="script:$path" return="$check"/>
			<action code="=($diff, subtract($min, $check))"/>
                        <action code="=($diff, abs($diff))"/>
                        <action code="changetype($diff, 'double')"/>
		        <if test="less($diff, 0.0001)">		<!-- if $min = $check -->
				<action code="=($logmsg, 'PASS! The ')"/>
				<action code="+=($logmsg, $ParameterName)"/>
				<action code="+=($logmsg, ' reaches its minimum value ')"/>
				<action code="+=($logmsg, $check)"/>
				<action code="+=($logmsg, $ParameterUnit)"/>
				<action code="+=($logmsg, '.')"/>
				<log>script:$logmsg</log>
				<!-- when $ParameterName reaches its min value, toggle the [$ParameterName] key down one more time, the value should stay at min -->
				<if test="equal($BoundaryDown, 'yes')">
					<action code="Boundary($path, $ParameterKeyDown)"/>
				</if>
			</if>
			<if test="greater($diff, 0.0001)">		<!-- if $min != $check -->
				<action code="=($logmsg, 'FAIL! The ')"/>
				<action code="+=($logmsg, $ParameterName)"/>
				<action code="+=($logmsg, ' does NOT reach its minimum value ')"/>
				<action code="+=($logmsg, $min)"/>
				<action code="+=($logmsg, $ParameterUnit)"/>
				<action code="+=($logmsg, '! Current ')"/>
				<action code="+=($logmsg, $ParameterName)"/>
				<action code="+=($logmsg, ' value is ')"/>
				<action code="+=($logmsg, $check)"/>
				<action code="+=($logmsg, $ParameterUnit)"/>
				<action code="+=($logmsg, '!')"/>
				<log level="error">script:$logmsg</log>
				<break/>
			</if>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [2D Gain] key (Gain in B-Mode/M-Mode, Contrast Gain in NLC Mode, or PA Gain in PA-Mode)

		Example:
			<action code="Gain2D('B-Mode', 0, 70, 1, 'yes', 'yes')"/>

	************************************************************************************** -->
	<function name="Gain2D" inline="false">
		<param name="$mode"/>
		<param name="$min"/>
		<param name="$max"/>
		<param name="$step"/>
		<param name="$BoundaryUp"/>
		<param name="$BoundaryDown"/>

		<action code="=($path, 'Acq/')"/>
		<if test="or(equal($mode, 'B-Mode'), equal($mode, 'M-Mode'))">
			<!-- $path: Acq/B-Mode/Rx/User-Gain -->
			<action code="+=($path, 'B-Mode/Rx/User-Gain')"/>
		</if>
		<if test="and(notequal($mode, 'B-Mode'), notequal($mode, 'M-Mode'))">
			<!-- $path: Acq/$mode/Rx/Gain -->
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/Rx/Gain')"/>
		</if>

		<if test="equal($mode, 'B-Mode')">
			<action code="LoopParameter($min, $max, $step, $BoundaryUp, $BoundaryDown, $path, '2D Gain', 'dB', 'RxGainUp', 'RxGainDown')"/>
		</if>
		<if test="equal($mode, 'M-Mode')">
			<action code="LoopParameter($min, $max, $step, $BoundaryUp, $BoundaryDown, $path, 'Gain', 'dB', 'RxGainUp', 'RxGainDown')"/>
		</if>
		<if test="equal($mode, 'Adv-Contrast-Mode')">
			<action code="LoopParameter($min, $max, $step, $BoundaryUp, $BoundaryDown, $path, 'Contrast Gain', 'dB', 'RxGainUp', 'RxGainDown')"/>
		</if>
		<if test="equal($mode, 'Pa-Mode')">
			<action code="LoopParameter($min, $max, $step, $BoundaryUp, $BoundaryDown, $path, 'PA Gain', 'dB', 'RxGainUp', 'RxGainDown')"/>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Image Width] key sub function A (verify Image Width value)

		Example:
			<action code="ImageWidthA(2.04, 3.04)"/>

	************************************************************************************** -->
	<function name="ImageWidthA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$check"/>
		
		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($diff, subtract($target, $check))"/>
		<action code="=($diff, abs($diff))"/>
		<if test="less($diff, 0.0021)">		<!-- if $target = $check, for MS-700, display is .73mm, actual is .728mm -->
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Image Width is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, 'mm as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Image Width] key

		Example:
			<action code="ImageWidth('B-Mode', 23.04)"/>

	************************************************************************************** -->
	<function name="ImageWidth" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>

		<action code="=($logmsg, 'Setting Image Width to ')"/>
		<action code="+=($logmsg, $target)"/>
		<action code="+=($logmsg, 'mm in ')"/>
		<action code="+=($logmsg, $mode)"/>
		<action code="+=($logmsg, '...')"/>
		<log>script:$logmsg</log>

		<!-- read current Image Width value -->
		<pdm action="read" name="Acq/B-Mode/Display/Width" return="$checkori"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<action code="=($diff, subtract($target, $checkori))"/>
		<if test="greater($diff, 0.9)">		<!-- if $target > $checkori, for MS-700, target could be 2.73mm, checkori coulb be 2.728mm -->
			<loop count="28">
				<cmd code="WidthUp"/>
				<sleep time="1000"/>
				<if test="equal($mode, 'Pa-Mode')">
					<sleep time="1000"/>
				</if>
				<pdm action="read" name="Acq/B-Mode/Display/Width" return="$check"/>
				<if test="greater($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Image Width] key up should increase Image Width, ')"/>
					<action code="+=($logmsg, 'but actually it decreases Image Width! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, ImageWidthA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="or(equal($diff, 0.0), and(greater($diff, 0.0), less($diff, 0.9)))">        <!-- if $target = $checkori, for MS-700, target could be 2.73mm, checkori coulb be 2.728mm -->
			<action code="=($same, 'same')"/>
			<action code="=($flag, ImageWidthA($target, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="less($diff, 0.0)">        <!-- if $target = $checkori, for MS-700, target could be 2.73mm, checkori coulb be 2.728mm -->
			<loop count="28">
				<cmd code="WidthDown"/>
				<sleep time="1000"/>
				<if test="equal($mode, 'Pa-Mode')">
					<sleep time="1000"/>
				</if>
				<pdm action="read" name="Acq/B-Mode/Display/Width" return="$check"/>
				<if test="less($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Image Width] key down should decrease Image Width, ')"/>
					<action code="+=($logmsg, 'but actually it increases Image Width! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, ImageWidthA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected Image Width which is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, 'mm!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Depth Offset] key sub function A (verify Depth Offset value)

		Example:
			<action code="DepthOffsetA(2, 2)"/>

	************************************************************************************** -->
	<function name="DepthOffsetA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$check"/>
		
		<action code="=($flag, 'FAIL stay')"/>
		<if test="equal($target, $check)">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Depth Offset is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, 'mm as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Depth Offset] key

		Example:
			<action code="DepthOffset('B-Mode', 2)"/>

	************************************************************************************** -->
	<function name="DepthOffset" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>

		<action code="=($logmsg, 'Setting Depth Offset to ')"/>
		<action code="+=($logmsg, $target)"/>
		<action code="+=($logmsg, 'mm in ')"/>
		<action code="+=($logmsg, $mode)"/>
		<action code="+=($logmsg, '...')"/>
		<log>script:$logmsg</log>

		<!-- read current Depth Offset value -->
		<pdm action="read" name="Acq/B-Mode/Display/Delay" return="$checkori"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="greater($target, $checkori)">
			<loop count="32">
				<cmd code="DepthOffsetDown"/>
				<sleep time="1000"/>
				<if test="equal($mode, 'Pa-Mode')">
					<sleep time="1000"/>
				</if>
				<pdm action="read" name="Acq/B-Mode/Display/Delay" return="$check"/>
				<if test="greater($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Depth Offset] key down should increase Depth Offset, ')"/>
					<action code="+=($logmsg, 'but actually it decreases Depth Offset! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, DepthOffsetA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($target, $checkori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, DepthOffsetA($target, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="less($target, $checkori)">
			<loop count="32">
				<cmd code="DepthOffsetUp"/>
				<sleep time="1000"/>
				<if test="equal($mode, 'Pa-Mode')">
					<sleep time="1000"/>
				</if>
				<pdm action="read" name="Acq/B-Mode/Display/Delay" return="$check"/>
				<if test="less($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Depth Offset] key up should decrease Depth Offset, ')"/>
					<action code="+=($logmsg, 'but actually it increases Depth Offset! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, DepthOffsetA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected Depth Offset which is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, 'mm!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Persist] key sub function A (verify Persist name)

		Example:
			<action code="PersistA('Off', 'Low')"/>

	************************************************************************************** -->
	<function name="PersistA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$check"/>
		
		<action code="=($flag, 'FAIL stay')"/>
		<if test="equal($target, $check)">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Persist is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ' as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Persist] key sub function B (compare current/target value then decide toggle key up/down) 

		Example:
			<action code="PersistB('Color-Mode', 'High', 0.1)"/>

	************************************************************************************** -->
	<function name="PersistB" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>
		<param name="$targetno"/>

		<!-- $path: Acq/$mode/Display/Persist-Name -->
		<action code="=($path, 'Acq/')"/>
		<action code="+=($path, $mode)"/>
		<action code="+=($path, '/Display/Persist-Name')"/>
		<!-- $pathno: Acq/$mode/Display/Persist-Alpha -->
		<action code="=($pathno, 'Acq/')"/>
		<action code="+=($pathno, $mode)"/>
		<action code="+=($pathno, '/Display/Persist-Alpha')"/>
		<!-- read current Persist name -->
		<pdm action="read" name="script:$path" return="$checkori"/>
		<!-- read current Persist name -->
		<pdm action="read" name="script:$pathno" return="$checknoori"/>
		<if test="equal($checknoori, 0.0)">
			<action code="=($checknoori, 1.0)"/>
		</if>
		<if test="equal($checknoori, -1.0)">
			<action code="=($checknoori, 0.0)"/>
		</if>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="greater($targetno, $checknoori)">
			<loop count="5">
				<cmd code="PersistDown"/>
				<sleep time="2000"/>	 <!-- when Persist is High or Max or MIP, we need longer sleep time-->
				<pdm action="read" name="script:$path" return="$check"/>
				<pdm action="read" name="script:$pathno" return="$checkno"/>
				<if test="equal($checkno, 0.0)">
					<action code="=($checkno, 1.0)"/>
				</if>
				<if test="equal($checkno, -1.0)">
					<action code="=($checkno, 0.0)"/>
				</if>
				<if test="greater($checknoori, $checkno)">
					<action code="=($logmsg, 'FAIL! Toggle [Persist] key down should decrease Persist, ')"/>
					<action code="+=($logmsg, 'but actually it increases Persist! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, PersistA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($targetno, $checknoori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, PersistA($target, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="less($targetno, $checknoori)">
			<loop count="5">
				<cmd code="PersistUp"/>
				<sleep time="2000"/>	 <!-- when Persist is High or Max or MIP, we need longer sleep time-->
				<pdm action="read" name="script:$path" return="$check"/>
				<pdm action="read" name="script:$pathno" return="$checkno"/>
				<if test="equal($checkno, 0.0)">
					<action code="=($checkno, 1.0)"/>
				</if>
				<if test="equal($checkno, -1.0)">
					<action code="=($checkno, 0.0)"/>
				</if>
				<if test="less($checknoori, $checkno)">
					<action code="=($logmsg, 'FAIL! Toggle [Persist] key up should increase Persist, ')"/>
					<action code="+=($logmsg, 'but actually it decreases Persist! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, PersistA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected Persist which is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Persist] key sub function C (Log: Setting Persist to $target in $mode...)

		Example:
			<action code="PersistC('B-Mode', 'Low')"/>

	************************************************************************************** -->
	<function name="PersistC" inline="false">
		<param name="$mode"/>
		<param name="$target"/>

		<action code="=($logmsg, 'Setting Persist to ')"/>
		<action code="+=($logmsg, $target)"/>
		<action code="+=($logmsg, ' in ')"/>
		<action code="+=($logmsg, $mode)"/>
		<action code="+=($logmsg, '...')"/>
		<log>script:$logmsg</log>
	</function>

	<!-- *************************************************************************************

		Toggle [Persist] key in B-Mode

		Example:
			<action code="Persist4('B-Mode', 'High')"/>

	************************************************************************************** -->
	<function name="Persist4" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>

		<!-- Log: Setting Persist to $target in $mode... -->
		<action code="PersistC($mode, $target)"/>

		<!-- match target Persist name with Persist value -->
		<action code="=($targetno, 0.0)"/>
		<choose>
			<when test="equal($target, 'Off')">
				<action code="=($targetno, 1.0)"/>
			</when>
			<when test="equal($target, 'Low')">
				<action code="=($targetno, 0.75)"/>
			</when>
			<when test="equal($target, 'Med')">
				<action code="=($targetno, 0.5)"/>
			</when>
			<when test="equal($target, 'High')">
				<action code="=($targetno, 0.35)"/>
			</when>
		</choose>

		<action code="=($same, PersistB($mode, $target, $targetno))"/>
	</function>

	<!-- *************************************************************************************

		Toggle [Persist] key in Color Doppler Mode or Power Doppler Mode

		Example:
			<action code="Persist5('Color-Mode', 'Max')"/>

	************************************************************************************** -->
	<function name="Persist5" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>

		<!-- Log: Setting Persist to $target in $mode... -->
		<action code="PersistC($mode, $target)"/>

		<!-- match target Persist name with Persist value -->
		<action code="=($targetno, 0.0)"/>
		<choose>
			<when test="equal($target, 'Off')">
				<action code="=($targetno, 1.0)"/>
			</when>
			<when test="equal($target, 'Low')">
				<action code="=($targetno, 0.5)"/>
			</when>
			<when test="equal($target, 'Med')">
				<action code="=($targetno, 0.25)"/>
			</when>
			<when test="equal($target, 'High')">
				<action code="=($targetno, 0.1)"/>
			</when>
			<when test="equal($target, 'Max')">
				<action code="=($targetno, 0.05)"/>
			</when>
		</choose>

		<action code="=($same, PersistB($mode, $target, $targetno))"/>
	</function>

	<!-- *************************************************************************************

		Toggle [Persist] key in Nonlinear Contrast Mode

		Example:
			<action code="Persist6('Adv-Contrast-Mode', 'MIP')"/>

	************************************************************************************** -->
	<function name="Persist6" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>

		<!-- Log: Setting Persist to $target in $mode... -->
		<action code="PersistC($mode, $target)"/>

		<!-- match target Persist name with Persist value -->
		<action code="=($targetno, 0.0)"/>
		<choose>
			<when test="equal($target, 'Off')">
				<action code="=($targetno, 1.0)"/>
			</when>
			<when test="equal($target, 'Low')">
				<action code="=($targetno, 0.5)"/>
			</when>
			<when test="equal($target, 'Med')">
				<action code="=($targetno, 0.25)"/>
			</when>
			<when test="equal($target, 'High')">
				<action code="=($targetno, 0.1)"/>
			</when>
			<when test="equal($target, 'Max')">
				<action code="=($targetno, 0.05)"/>
			</when>
			<when test="equal($target, 'MIP')">
				<action code="=($targetno, 0.0)"/>
			</when>
		</choose>

		<action code="=($same, PersistB($mode, $target, $targetno))"/>
	</function>

	<!-- *************************************************************************************

		Toggle [Sensitivity] key sub function A (verify Sensitivity value)

		Example:
			<action code="SensitivityA(1, 2)"/>

	************************************************************************************** -->
	<function name="SensitivityA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$check"/>
		
		<action code="=($flag, 'FAIL stay')"/>
		<if test="equal($target, $check)">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Sensitivity is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ' as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Sensitivity] key

		Example:
			<action code="Sensitivity('Color-Mode', 4)"/>

	************************************************************************************** -->
	<function name="Sensitivity" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>

		<action code="=($logmsg, 'Setting Sensitivity to ')"/>
		<action code="+=($logmsg, $target)"/>
		<action code="+=($logmsg, ' in ')"/>
		<action code="+=($logmsg, $mode)"/>
		<action code="+=($logmsg, '...')"/>
		<log>script:$logmsg</log>

		<action code="=($path, 'Acq/')"/>
		<if test="equal($mode, 'B-Mode')">
			<!-- $path: Acq/$mode/Rx/Synth-Aper-Enable -->
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/Rx/Synth-Aper-Enable')"/>
		</if>
		<if test="or(equal($mode, 'Color-Mode'), equal($mode, 'Power-Mode'))">
			<!-- $path: Acq/$mode/ColorSoft/Sensitivity -->
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/ColorSoft/Sensitivity')"/>
		</if>
		<if test="equal($mode, 'Adv-Contrast-Mode')">
			<!-- $path: Acq/$mode/AdvContrastModeSoft/Pulse-Sequence-Reps -->
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/AdvContrastModeSoft/Pulse-Sequence-Reps')"/>
		</if>
		<if test="equal($mode, 'Pa-Mode')">
			<!-- $path: Acq/$mode/PaModeSoft/Sensitivity -->
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/PaModeSoft/Sensitivity')"/>
		</if>
		<!-- read current Sensitivity value -->
		<pdm action="read" name="script:$path" return="$checkori"/>
		<if test="equal(gettype($checkori), 'bool')">
			<if test="equal($false, $checkori)">
				<action code="=($checkori, 0)"/>
			</if>
			<if test="equal($true, $checkori)">
				<action code="=($checkori, 1)"/>
			</if>
		</if>
		<action code="changetype($checkori, 'ulong')"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="greater($target, $checkori)">
			<loop count="7">
				<cmd code="SensitivityUp"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="equal(gettype($check), 'bool')">
					<if test="equal($false, $check)">
						<action code="=($check, 0)"/>
					</if>
					<if test="equal($true, $check)">
						<action code="=($check, 1)"/>
					</if>
				</if>
				<action code="changetype($check, 'ulong')"/>
				<if test="greater($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Sensitivity] key up should increase Sensitivity, ')"/>
					<action code="+=($logmsg, 'but actually it decreases Sensitivity! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, SensitivityA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($target, $checkori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, SensitivityA($target, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="less($target, $checkori)">
			<loop count="7">
				<cmd code="SensitivityDown"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="equal(gettype($check), 'bool')">
					<if test="equal($false, $check)">
						<action code="=($check, 0)"/>
					</if>
					<if test="equal($true, $check)">
						<action code="=($check, 1)"/>
					</if>
				</if>
				<action code="changetype($check, 'ulong')"/>
				<if test="less($checkori, $target)">
					<action code="=($logmsg, 'FAIL! Toggle [Sensitivity] key down should decrease Sensitivity, ')"/>
					<action code="+=($logmsg, 'but actually it increases Sensitivity! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, SensitivityA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected Sensitivity which is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Cauculate and verify frame rate in Color Doppler Mode & Power Doppler Mode (based on frame rate table values)

		Example:
			<action code="FrameRateTableDoppler('Color-Mode', 4000, 21000000, 21000000, 2, 12, 11.0, 16.04, 15.84, 'Full', 9.0)"/>

	************************************************************************************** -->
	<function name="FrameRateTableDoppler" inline="false">
		<param name="$mode"/>
		<param name="$PRF"/>	<!-- Hz -->
		<param name="$TxFreq"/>	<!-- Hz -->
		<param name="$RxFreq"/>	<!-- Hz -->
		<param name="$Sensitivity"/>
		<param name="$ImageDepth"/>		<!-- mm -->
		<param name="$FocusDepth"/>		<!-- mm -->
		<param name="$ImageWidth"/>		<!-- mm -->
		<param name="$BoxWidth"/>		<!-- mm -->
		<param name="$LineDensity"/>
		<param name="$DopplerFR"/>

		<!-- set PRF value -->
		<action code="BoxSize('min')"/>
		<action code="BoxPosition('top')"/>
		<action code="PRF($mode, $PRF)"/>

		<!-- set Frequency value -->
		<action code="Frequency($mode, $TxFreq, $RxFreq)"/>

		<!-- set Sensitivity, i.e., Ensemble, size -->
		<action code="Sensitivity($mode, $Sensitivity)"/>

		<!-- set Image Depth & Focus Depth value -->
		<action code="ImageDepth($mode, $ImageDepth, 'in range')"/>
		<action code="BoxSize('max')"/>
		<action code="FocusDepth($mode, $FocusDepth, -1, -1)"/>

		<!-- set Image Width value -->
		<action code="ImageWidth($mode, $ImageWidth)"/>

		<!-- set Box Width value -->
		<action code="=($logmsg, 'Setting Box Width to ')"/>
		<action code="+=($logmsg, $BoxWidth)"/>
		<action code="+=($logmsg, 'mm...')"/>
		<log>script:$logmsg</log>
		<action code="=($path, 'Acq/')"/>
		<action code="+=($path, $mode)"/>
		<action code="+=($path, '/Scan/Width')"/>
		<pdm action="write" name="script:$path" base="10">script:$BoxWidth</pdm>
		<sleep time="1000"/>
		<pdm action="read" name="script:$path" return="$check"/>
		<if test="equal($check, $BoxWidth)">
			<action code="=($logmsg, 'PASS! Current Box Width is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, 'mm as expected.')"/>
			<log>script:$logmsg</log>
		</if>
		<if test="notequal($check, $BoxWidth)">
			<action code="=($logmsg, 'FAIL! Current Box Width is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, 'mm, but expected Box Width is')"/>
			<action code="+=($logmsg, $BoxWidth)"/>
			<action code="+=($logmsg, 'mm!')"/>
			<log level="error">script:$logmsg</log>
		</if>
		<action code="PauseScan()"/>
		<if test="equal($mode, 'Color-Mode')">
			<action code="StartScan('ColorMode')"/>
		</if>
		<if test="equal($mode, 'Power-Mode')">
			<action code="StartScan('PowerMode')"/>
		</if>

		<!-- set Line Density value -->
		<action code="LineDensity5($mode, $LineDensity)"/>

		<!-- read displayed Frame Rate -->
		<sleep time="1000"/>
		<action code="=($path, 'Acq/')"/>
		<action code="+=($path, $mode)"/>
		<action code="+=($path, '/Scan/Frame-Rate-Acquisition-Acq-Disp')"/>
		<pdm action="read" name="script:$path" return="$check"/>

		<!-- 10% variance is acceptable for Frame Rate -->
		<action code="=($FRL, *($DopplerFR, 0.95))"/>	<!-- Frame Rate low limit -->
		<action code="=($FRH, *($DopplerFR, 1.05))"/>	<!-- Frame Rate high limit -->

		<!-- log: PASS! Expected $mode Frame Rate is xxx, and actual is xxx, which is within the 10% variance. -->
		<if test="and(or(greater($check, $FRL), equal($check, $FRL)), or(less($check, $FRH), equal($check, $FRH)))">
			<action code="=($logmsg, 'PASS! Expected ')"/>
			<action code="+=($logmsg, $mode)"/>
			<action code="+=($logmsg, ' Frame Rate is ')"/>
			<action code="+=($logmsg, $DopplerFR)"/>
			<action code="+=($logmsg, ', and actual is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ', which is within the 10% variance.')"/>
			<log>script:$logmsg</log>
		</if>

		<!-- log: FAIL! Expected B-Mode Frame Rate is xxx, but actual is xxx, which is outside the 10% variance. -->
		<if test="or(less($check, $FRL), greater($check, $FRH))">
			<action code="=($logmsg, 'FAIL! Expected ')"/>
			<action code="+=($logmsg, $mode)"/>
			<action code="+=($logmsg, ' Frame Rate is ')"/>
			<action code="+=($logmsg, $DopplerFR)"/>
			<action code="+=($logmsg, ', but actual is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ', which is outside the 10% variance.')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Turn [Velocity] knob sub function A (verify PRF value)

		Example:
			<action code="PRFA(1, 2)"/>

	************************************************************************************** -->
	<function name="PRFA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$check"/>
		
		<action code="=($flag, 'FAIL stay')"/>
		<if test="equal($target, $check)">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current PRF is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, 'Hz as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Turn [Velocity] knob

		Example:
			<action code="PRF('Color-Mode', 20000)"/>
			<action code="PRF('Power-Mode', 5000)"/>
			<action code="PRF('Pw-Mode', 30000)"/>
			<action code="PRF('Pw-Tissue-Mode', 7000)"/>

	************************************************************************************** -->
	<function name="PRF" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>

		<action code="=($logmsg, 'Setting PRF to ')"/>
		<action code="+=($logmsg, $target)"/>
		<action code="+=($logmsg, ' Hz in ')"/>
		<action code="+=($logmsg, $mode)"/>
		<action code="+=($logmsg, '...')"/>
		<log>script:$logmsg</log>

		<!-- $path: Acq/$mode/Tx/PRF-Display -->
		<action code="=($path, 'Acq/')"/>
		<action code="+=($path, $mode)"/>
		<action code="+=($path, '/Tx/PRF-Display')"/>
		<!-- read current PRF value -->
		<pdm action="read" name="script:$path" return="$checkori"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="greater($target, $checkori)">
			<loop count="19">
				<cmd code="VelocityUp"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="greater($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Velocity] key up should increase PRF, ')"/>
					<action code="+=($logmsg, 'but actually it decreases PRF! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, PRFA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($target, $checkori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, PRFA($target, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="less($target, $checkori)">
			<loop count="19">
				<cmd code="VelocityDown"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="less($checkori, $target)">
					<action code="=($logmsg, 'FAIL! Toggle [Velocity] key down should decrease PRF, ')"/>
					<action code="+=($logmsg, 'but actually it increases PRF! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, PRFA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected PRF which is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, 'Hz!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [SV/Gate] key sub function A (verify Gate value)

		Example:
			<action code="GateA(1, 2)"/>

	************************************************************************************** -->
	<function name="GateA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$check"/>
		
		<action code="=($flag, 'FAIL stay')"/>
		<if test="equal($target, $check)">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Gate is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ' as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [SV/Gate] key in Color/Power Doppler Mode and Advanced Contrast Mode

		Example:
			<action code="Gate('Color-Mode', 2)"/>

	************************************************************************************** -->
	<function name="Gate" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>

		<action code="=($logmsg, 'Setting Gate to ')"/>
		<action code="+=($logmsg, $target)"/>
		<action code="+=($logmsg, ' in ')"/>
		<action code="+=($logmsg, $mode)"/>
		<action code="+=($logmsg, '...')"/>
		<log>script:$logmsg</log>

		<!-- $path: Acq/$mode/Tx/Cycles -->
		<action code="=($path, 'Acq/')"/>
		<action code="+=($path, $mode)"/>
		<action code="+=($path, '/Tx/Cycles')"/>
		<!-- read current Gate value, i.e., Cycles value -->
		<pdm action="read" name="script:$path" return="$checkori"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="greater($target, $checkori)">
			<loop count="17">
				<cmd code="SvSizeUp"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="greater($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [SV/Gate] key up should increase Gate, ')"/>
					<action code="+=($logmsg, 'but actually it decreases Gate! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, GateA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($target, $checkori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, GateA($target, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="less($target, $checkori)">
			<loop count="17">
				<cmd code="SvSizeDown"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="less($checkori, $target)">
					<action code="=($logmsg, 'FAIL! Toggle [SV/Gate] key down should decrease Gate, ')"/>
					<action code="+=($logmsg, 'but actually it increases Gate! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, GateA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected Gate which is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Doppler Gain] key (Doppler Gain in Color Doppler Mode or Power Doppler Mode)

		Example:
			<action code="GainDoppler('Color-Mode', 0, 60, 1, 'yes', 'yes')"/>

	************************************************************************************** -->
	<function name="GainDoppler" inline="false">
		<param name="$mode"/>
		<param name="$min"/>
		<param name="$max"/>
		<param name="$step"/>
		<param name="$BoundaryUp"/>
		<param name="$BoundaryDown"/>

		<!-- $path: Acq/$mode/Rx/Gain -->
		<action code="=($path, 'Acq/')"/>
		<action code="+=($path, $mode)"/>
		<action code="+=($path, '/Rx/Gain')"/>

		<action code="LoopParameter($min, $max, $step, $BoundaryUp, $BoundaryDown, $path, 'Doppler Gain', 'dB', 'RxDopplerGainUp', 'RxDopplerGainDown')"/>
	</function>

	<!-- *************************************************************************************

		Caculate real voltage value for Color Doppler Mode and Power Doppler Mode

		Example:
			<action code="VoltageDoppler('Color-Mode', $same, 0.09, 30.0, 0.0, 14.0)"/>
			<action code="VoltageDoppler('Power-Mode', $same, 0.055, 26.0, 11.2, 22.7)"/>

	************************************************************************************** -->
	<function name="VoltageDoppler" inline="false">
		<param name="$mode"/>
		<param name="$same"/>
		<param name="$ElementSpacing"/>
		<param name="$Vxdcr"/>
		<param name="$CFIthermal1"/>
		<param name="$CFIthermal2"/>
				
		<if test="notequal($same, 'na')">		
			<!-- check the real voltage value $V-->
			<!-- First, you need to do a dcm read to read from hardware -->
			<dcm action="read" name="Hardware/Tx/HwTxCbCommon/VP-Mode2"/>
			<!-- Then, a pdm read into variable, VP-Mode2 is a memory type and so you need to define it is ulong and store it in an array -->
			<pdm action="read" name="Hardware/Tx/HwTxCbCommon/VP-Mode2" type="ulong" return="$check[]"/>
			<!-- Next, the byte orders are different on the Power PC (big endian) and computer (Intel little endian) -->
			<action code="=($check, byteswapulong($check))"/>
			<!-- Next, the voltage is contains between bit 0 to bit 7, zero out bit 8 & 9 -->
			<action code="=($check, bitwiseAnd($check, 255))"/>

      <action code="=($VP-Mode2, $check)"/>

      <!-- Decode Voltage $V= $check * 40.2696 / 255.0 -->
			<action code="changetype($check, 'double')"/>
			<action code="=($check, multiply($check, 40.2696))"/>
			<action code="=($V, divide($check, 255.0))"/>

      <action code="=($path, 'Acq/')"/>
      <action code="+=($path, $mode)"/>
      <action code="+=($path, '/Tx/Voltage-Max')"/>
      <pdm action="read" name="script:$path" return="$TxVMax"/>

      <!-- check the Tx Power value $Power-->
      <!-- $path: Acq/$mode/Tx/Power -->
      <action code="=($path, 'Acq/')"/>
      <action code="+=($path, $mode)"/>
      <action code="+=($path, '/Tx/Power')"/>
      <pdm action="read" name="script:$path" return="$TxPower"/>
      <action code="changetype($TxPower, 'double')"/>
      <action code="=($Power, divide($TxPower, 100.0))"/>

      <!-- $Vp2 = $TxVMax * sqrt($Power) -->
      <action code="=($Vp2, multiply(sqrt($Power), $TxVMax))"/>

      <action code="=($logmsg, 'VP-Mode2 = ')"/>
      <action code="+=($logmsg, $VP-Mode2)"/>
      <action code="+=($logmsg, '; TxVMax = ')"/>
      <action code="+=($logmsg, $TxVMax)"/>
      <action code="+=($logmsg, 'v; TxPower = ')"/>
      <action code="+=($logmsg, $TxPower)"/>
      <action code="+=($logmsg, '%; Vp2 = ')"/>
      <action code="+=($logmsg, $Vp2)"/>
      <action code="+=($logmsg, 'v.')"/>
      <log>script:$logmsg</log>

      <!-- calculate the max voltage value $Vmax-->
			<!-- $LineFactor = max[1, BoxWidthinmm/Gate/64/ElementSpacing)] -->
			<!-- $Vmax = min{$Vxdcr, sqrt[TxFrequencyinMHz*($CFIthermal1*$LineFactor+$CFIthermal2)/Gate]} -->
      
			<!-- get the Box Width value $BoxWidth -->
			<action code="=($path, 'Acq/')"/>
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/Scan/Width')"/>
			<pdm action="read" name="script:$path" return="$BoxWidth"/>
      
			<!-- get the Transmit Frequency value $TxFrequency -->
			<action code="=($path, 'Acq/')"/>
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/Tx/Frequency')"/>
			<pdm action="read" name="script:$path" return="$check"/>
			<action code="changetype($check, 'double')"/>
			<action code="=($TxFrequency, divide($check, 1000000.0))"/>
      
			<!-- get the Gate value $Gate -->
			<action code="=($path, 'Acq/')"/>
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/Tx/Cycles')"/>
			<pdm action="read" name="script:$path" return="$Gate"/>
			<action code="changetype($Gate, 'double')"/>
      
			<!-- calculate $LineFactor -->
			<action code="=($check, divide($BoxWidth, $Gate))"/>
			<action code="=($check, divide($check, 64.0))"/>
      <action code="=($check, divide($check, $ElementSpacing))"/>
      <action code="=($LineFactor, $check)"/>
			<if test="less($LineFactor, 1.0)">
				<action code="=($LineFactor, 1.0)"/>
			</if>
      
      <!-- calculate $Vmax -->
			<action code="=($check, multiply($CFIthermal1, $LineFactor))"/>
			<action code="=($check, add($check, $CFIthermal2))"/>
			<action code="=($check, multiply($check, $TxFrequency))"/>
			<action code="=($check, divide($check, $Gate))"/>
			<action code="=($check, sqrt($check))"/>
      <action code="=($Vmax1, $check)"/>

      <action code="=($Vmax, 0.0)"/>	<!-- if do not initialize Vmax here, then the scope of Vmax will be inside the if -->
			<if test="or(greater($Vxdcr, $check), equal($Vxdcr, $check))">
				<action code="=($Vmax, $check)"/>
			</if>
			<if test="less($Vxdcr, $check)">
				<action code="=($Vmax, $Vxdcr)"/>
			</if>

      <action code="=($logmsg, 'Gate = ')"/>
      <action code="+=($logmsg, $Gate)"/>
      <action code="+=($logmsg, '; BoxWidth = ')"/>
      <action code="+=($logmsg, $BoxWidth)"/>
      <action code="+=($logmsg, '; TxFrequency = ')"/>
      <action code="+=($logmsg, $TxFrequency)"/>
      <action code="+=($logmsg, '; LineFactor = ')"/>
      <action code="+=($logmsg, $LineFactor)"/>
      <action code="+=($logmsg, '.')"/>
      <log>script:$logmsg</log>

      <action code="=($logmsg, 'sqrt[TxFrequencyinMHz*($CFIthermal1*$LineFactor+$CFIthermal2)/Gate] = ')"/>
      <action code="+=($logmsg, $Vmax1)"/>
      <action code="+=($logmsg, 'v; Vxdcr = ')"/>
      <action code="+=($logmsg, $Vxdcr)"/>
      <action code="+=($logmsg, 'v; Vmax(min{Vxdcr, Vmax1}) = ')"/>
      <action code="+=($logmsg, $Vmax)"/>
      <action code="+=($logmsg, '.')"/>
      <log>script:$logmsg</log>

      <!-- $V should be lass than $check + 0.05 -->
			<action code="=($VLimit, add($Vmax, 0.05))"/>
			<if test="or(greater($VLimit, $Vp2), equal($VLimit, $Vp2))">
				<action code="=($logmsg, 'PASS! V less than Vmax as expected. Real voltage value V is ')"/>
				<action code="+=($logmsg, $Vp2)"/>
				<action code="+=($logmsg, 'v. Max voltage value Vmax is ')"/>
				<action code="+=($logmsg, $Vmax)"/>
				<action code="+=($logmsg, 'v.')"/>
				<log>script:$logmsg</log>
			</if>
			<if test="less($VLimit, $Vp2)">
				<action code="=($logmsg, 'FAIL! V greater than Vmax! Real voltage value V is ')"/>
				<action code="+=($logmsg, $Vp2)"/>
				<action code="+=($logmsg, 'v! Max voltage value Vmax is ')"/>
				<action code="+=($logmsg, $Vmax)"/>
        <action code="+=($logmsg, 'v.')"/>
				<log level="error">script:$logmsg</log>
			</if>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Beam Angle] key sub function A (verify Beam Angle value)

		Example:
			<action code="BeamAngleA(-15, 0)"/>

	************************************************************************************** -->
	<function name="BeamAngleA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$check"/>
		
		<action code="=($flag, 'FAIL stay')"/>
		<if test="equal($target, $check)">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Beam Angle is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, 'degree as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Beam Angle] key

		Example:
			<action code="BeamAngle('Color-Mode', 15, 'out of range')"/>
			<action code="BeamAngle('Pw-Mode', 0, 'in range')"/>

	************************************************************************************** -->
	<function name="BeamAngle" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>
		<param name="$range"/>

		<action code="=($logmsg, 'Setting Beam Angle to ')"/>
		<action code="+=($logmsg, $target)"/>
		<action code="+=($logmsg, 'degree in ')"/>
		<action code="+=($logmsg, $mode)"/>
		<action code="+=($logmsg, '...')"/>
		<log>script:$logmsg</log>

		<!-- $path: Acq/$mode/Scan/Steering-Angle -->
		<action code="=($path, 'Acq/')"/>
		<action code="+=($path, $mode)"/>
		<action code="+=($path, '/Scan/Steering-Angle')"/>
		<!-- read current Beam Angle value -->
		<pdm action="read" name="script:$path" return="$checkori"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="greater($target, $checkori)">
			<loop count="2">
				<cmd code="BeamAngleUp"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="greater($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Beam Angle] key up should increase Beam Angle, ')"/>
					<action code="+=($logmsg, 'but actually it decrease Beam Angle! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, BeamAngleA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($target, $checkori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, BeamAngleA($target, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="less($target, $checkori)">
			<loop count="2">
				<cmd code="BeamAngleDown"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="less($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Beam Angle] key down should decrease Beam Angle, ')"/>
					<action code="+=($logmsg, 'but actually it increase Beam Angle! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, BeamAngleA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="and(equal($flag, 'FAIL stay'), equal($range, 'in range'))">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected Beam Angle which is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, 'degree!')"/>
			<log level="error">script:$logmsg</log>
		</if>

		<if test="and(equal($flag, 'FAIL stay'), equal($range, 'out of range'))">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'PASS! Can NOT reach Beam Angle ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, 'degree which is expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Adjust Color/Contrast/PA box size to minimum or maximum

		Example:
			<action code="BoxSize('min')"/>
			<action code="BoxSize('max')"/>

	************************************************************************************** -->
	<function name="BoxSize" inline="false">
		<param name="$target"/>
		
		<pdm action="read" name="App/Settings/UI/Cursor-State" return="$check"/>
		<!-- if cursor is on, then click cursor key to turn off the cursor -->
		<if test="equal($true, $check)">	
			<cmd code="Cursor"/>
			<sleep time="1000"/>
		</if>
		<!-- switch from box reposition state to box resize state -->
		<cmd code="Update"/>
		<sleep time="1000"/>

		<if test="equal($target, 'min')">
			<action code="=($logmsg, 'Setting Box Size to minimum...')"/>
			<log>script:$logmsg</log>
			<ui>
				<input mouse="relative" positionX="-1000"/>
			</ui>
			<sleep time="1000"/>
			<ui>
				<input mouse="relative" positionY="1000"/>
			</ui>
			<sleep time="1000"/>
		</if>
		<if test="equal($target, 'max')">
			<action code="=($logmsg, 'Setting Box Size to maximum...')"/>
			<log>script:$logmsg</log>
			<ui>
				<input mouse="relative" positionX="1000"/>
			</ui>
			<sleep time="1000"/>
			<ui>
				<input mouse="relative" positionY="-1000"/>
			</ui>
			<sleep time="1000"/>
		</if>
		<cmd code="Update"/>
		<sleep time="1000"/>
	</function>

	<!-- *************************************************************************************

		Adjust Color/Contrast/PA box, PW/PW Tissue SV, M/AM gate position to top or bottom

		Example:
			<action code="BoxPosition('top')"/>
			<action code="BoxPosition('bottom')"/>
			<action code="BoxPosition('left')"/>
			<action code="BoxPosition('right')"/>

	************************************************************************************** -->
	<function name="BoxPosition" inline="false">
		<param name="$target"/>
		
		<pdm action="read" name="App/Settings/UI/Cursor-State" return="$check"/>
		<!-- if cursor is on, then click cursor key to turn off the cursor -->
		<if test="equal($true, $check)">	
			<cmd code="Cursor"/>
			<sleep time="1000"/>
		</if>

		<if test="equal($target, 'top')">
			<action code="=($logmsg, 'Setting Box Position to the top of the image...')"/>
			<log>script:$logmsg</log>
			<ui>
				<input mouse="relative" positionY="-1000"/>
			</ui>
			<sleep time="1000"/>
		</if>
		<if test="equal($target, 'bottom')">
			<action code="=($logmsg, 'Setting Box Position to the bottom of the image...')"/>
			<log>script:$logmsg</log>
			<ui>
				<input mouse="relative" positionY="1000"/>
			</ui>
			<sleep time="1000"/>
		</if>
		<if test="equal($target, 'left')">
			<action code="=($logmsg, 'Setting Box Position to the left side of the image...')"/>
			<log>script:$logmsg</log>
			<ui>
				<input mouse="relative" positionX="-1000"/>
			</ui>
			<sleep time="1000"/>
		</if>
		<if test="equal($target, 'right')">
			<action code="=($logmsg, 'Setting Box Position to the right side of the image...')"/>
			<log>script:$logmsg</log>
			<ui>
				<input mouse="relative" positionX="1000"/>
			</ui>
			<sleep time="1000"/>
		</if>
	</function>

	<!-- *************************************************************************************

		Detect Color/Contrast/PA box size value is as expected or not

		Example:
			<action code="BoxSizeCheck('Color-Mode', 1.8, 1.8)"/>

	************************************************************************************** -->
	<function name="BoxSizeCheck" inline="false">
		<param name="$mode"/>
		<param name="$height"/>
		<param name="$width"/>

		<!-- $pathheight: Acq/$mode/Scan/Height -->
		<action code="=($pathheight, 'Acq/')"/>
		<action code="+=($pathheight, $mode)"/>
		<action code="+=($pathheight, '/Scan/Height')"/>
		<!-- read current box height value -->
		<pdm action="read" name="script:$pathheight" return="$checkheight"/>
		<!-- $pathwidth: Acq/$mode/Scan/Width -->
		<action code="=($pathwidth, 'Acq/')"/>
		<action code="+=($pathwidth, $mode)"/>
		<action code="+=($pathwidth, '/Scan/Width')"/>
		<!-- read current box width value -->
		<pdm action="read" name="script:$pathwidth" return="$checkwidth"/>

		<action code="=($diffheight, subtract($checkheight, $height))"/>
		<action code="=($diffheight, abs($diffheight))"/>
		<action code="=($diffwidth, subtract($checkwidth, $width))"/>
		<action code="=($diffwidth, abs($diffwidth))"/>

		<!-- if $checkheight=$height & $checkwidth=$width -->
		<if test="and(less($diffheight, 0.0001), less($diffwidth, 0.0001))">
			<action code="=($logmsg, 'PASS! Current box height is ')"/>
			<action code="+=($logmsg, $checkheight)"/>
			<action code="+=($logmsg, 'mm and box width is ')"/>
			<action code="+=($logmsg, $checkwidth)"/>
			<action code="+=($logmsg, 'mm as expected.')"/>
			<log>script:$logmsg</log>
		</if>
		<!-- if $checkheight!=$height or $checkwidth!=$width -->
		<if test="or(greater($diffheight, 0.0001), greater($diffwidth, 0.0001))">
			<action code="=($logmsg, 'FAIL! Current box height is ')"/>
			<action code="+=($logmsg, $checkheight)"/>
			<action code="+=($logmsg, 'mm and box width is ')"/>
			<action code="+=($logmsg, $checkwidth)"/>
			<action code="+=($logmsg, 'mm. The expected box height is ')"/>
			<action code="+=($logmsg, $height)"/>
			<action code="+=($logmsg, 'mm and box width is ')"/>
			<action code="+=($logmsg, $width)"/>
			<action code="+=($logmsg, 'mm!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Choose Linear Contrast Mode or Nonlinear Contrast Mode

		Example:
			<action code="Contrast('LC')"/>
			<action code="Contrast('NLC')"/>

	************************************************************************************** -->
	<function name="Contrast" inline="false">
		<param name="$target"/>

		<action code="PauseScan()"/>
		<if test="equal($target, 'LC')">	
			<pdm action="write" name="Acq/Mode/Settings/Use-Advanced-Contrast">false</pdm>
			<sleep time="1000"/>
		</if>
		<if test="equal($target, 'NLC')">	
			<pdm action="write" name="Acq/Mode/Settings/Use-Advanced-Contrast">true</pdm>
			<sleep time="1000"/>
		</if>
	</function>

	<!-- *************************************************************************************

		Detect Default value is as expected or not

		Example:
			<action code="Default($same)"/>

	************************************************************************************** -->
	<function name="Default" inline="false">
		<param name="$same"/>

		<if test="equal($same, 'same')">	
			<action code="=($logmsg, 'PASS! The default value is as expected.')"/>
			<log>script:$logmsg</log>
		</if>
		<if test="notequal($same, 'same')">	
			<action code="=($logmsg, 'FAIL! The default value is NOT as expected!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Detect Display Map value is as expected or not

		Example:
			<action code="DisplayMapCheck('Contrast-Mode', 'MB1')"/>

	************************************************************************************** -->
	<function name="DisplayMapCheck" inline="false">
		<param name="$mode"/>
		<param name="$target"/>

		<!-- $path: Acq/$mode/Display/Current-Palette-Name -->
		<action code="=($path, 'Acq/')"/>
		<action code="+=($path, $mode)"/>
		<action code="+=($path, '/Display/Current-Palette-Name')"/>
		<!-- read current Display Map value -->
		<pdm action="read" name="script:$path" return="$check"/>

		<if test="equal($check, $target)">
			<action code="=($logmsg, 'PASS! Current Display Map is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ' as expected.')"/>
			<log>script:$logmsg</log>
		</if>
		<if test="notequal($check, $target)">
			<action code="=($logmsg, 'FAIL! Current Display Map is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ', but the expected Display Map is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Cauculate and verify frame rate in Linear Contrast Mode (based on frame rate table values)

		Example:
			<action code="FrameRateTableLC(21000000, 17500000, 15.0, 21.0, 23.04, 'Standard', 97)"/>

	************************************************************************************** -->
	<function name="FrameRateTableLC" inline="false">
		<param name="$TxFreq"/>	<!-- Hz -->
		<param name="$RxFreq"/>	<!-- Hz -->
		<param name="$FocusDepth"/>	<!-- mm -->
		<param name="$ImageDepth"/>	<!-- mm -->
		<param name="$ImageWidth"/>		<!-- mm -->
		<param name="$LineDensity"/>
		<param name="$LCFR"/>

		<!-- set Frame Rate Setting value -->
		<action code="FrameRateSetting6('Contrast-Mode', 'Max')"/>

		<!-- set Receive Frequency value -->
		<action code="Frequency('Contrast-Mode', $TxFreq, $RxFreq)"/>

		<!-- set Bottom of Display - Image Depth - value -->
		<action code="ImageDepth('Contrast-Mode', $ImageDepth, 'in range')"/>

		<!-- set Display Width - Image Width -value -->
		<action code="ImageWidth('Contrast-Mode', $ImageWidth)"/>

		<!-- set Single Focal Depth value -->
		<action code="FocalZones('Contrast-Mode', 'Single', 0)"/>
		<action code="FocusDepth('Contrast-Mode', $FocusDepth, -1, -1)"/>

		<!-- set Line Density value -->
		<action code="LineDensity2('Contrast-Mode', $LineDensity)"/>

		<!-- read displayed Frame Rate -->
		<sleep time="1000"/>
		<pdm action="read" name="Acq/Contrast-Mode/Scan/Frame-Rate-Acquisition-Acq-Disp" return="$check"/>

		<!-- 10% variance is acceptable for Frame Rate -->
		<action code="=($FRL, *($LCFR, 0.95))"/>	<!-- Frame Rate low limit -->
		<action code="=($FRH, *($LCFR, 1.05))"/>	<!-- Frame Rate high limit -->

		<!-- log: PASS! Expected Linear Contrast Mode Frame Rate is xxx, and actual is xxx, which is within the 10% variance. -->
		<if test="and(or(greater($check, $FRL), equal($check, $FRL)), or(less($check, $FRH), equal($check, $FRH)))">
			<action code="=($logmsg, 'PASS! Expected Linear Contrast Mode Frame Rate is ')"/>
			<action code="+=($logmsg, $LCFR)"/>
			<action code="+=($logmsg, ', and actual is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ', which is within the 10% variance.')"/>
			<log>script:$logmsg</log>
		</if>

		<!-- log: FAIL! Expected Linear Contrast Mode Frame Rate is xxx, but actual is xxx, which is outside the 10% variance. -->
		<if test="or(less($check, $FRL), greater($check, $FRH))">
			<action code="=($logmsg, 'FAIL! Expected Linear Contrast Mode Frame Rate is ')"/>
			<action code="+=($logmsg, $LCFR)"/>
			<action code="+=($logmsg, ', but actual is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ', which is outside the 10% variance.')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Uncheck Max Cine Loop Size for Linear Contrast Mode, Nonlinear Contrast Mode or PA-Mode

		Example:
			<action code="CineLoopSize('Contrast-Mode')"/>
			<action code="CineLoopSize('Adv-Contrast-Mode')"/>
			<action code="CineLoopSize('Pa-Mode')"/>

	************************************************************************************** -->
	<function name="CineLoopSize" inline="false">
		<param name="$mode"/>

		<action code="PauseScan()"/>
		<!-- $path: Acq/$mode/Scan/Max-Frames -->
		<action code="=($path, 'Acq/')"/>
		<action code="+=($path, $mode)"/>
		<action code="+=($path, '/Scan/Max-Frames')"/>
		<pdm action="write" name="script:$path">false</pdm>
		<sleep time="1000"/>
	</function>

	<!-- *************************************************************************************

		Cauculate and verify frame rate in Nonlinear Contrast Mode (based on frame rate table values)

		Example:
			<action code="FrameRateTableNLC(21000000, 21000000, 1, 18.04, 14.00, 'Standard', 39.0)"/>

	************************************************************************************** -->
	<function name="FrameRateTableNLC" inline="false">
		<param name="$TxFreq"/>	<!-- Hz -->
		<param name="$RxFreq"/>	<!-- Hz -->
		<param name="$Sensitivity"/>
		<param name="$ImageWidth"/>		<!-- mm -->
		<param name="$BoxWidth"/>		<!-- mm -->
		<param name="$LineDensity"/>
		<param name="$NLCFR"/>

		<!-- set Frame Rate Setting value -->
		<action code="FrameRateSetting10('Adv-Contrast-Mode', 'Max')"/>

		<!-- set Frequency value -->
		<action code="Frequency('Adv-Contrast-Mode', $TxFreq, $RxFreq)"/>

		<!-- set Sensitivity, i.e., Pulse-Sequence-Reps, value -->
		<action code="Sensitivity('Adv-Contrast-Mode', $Sensitivity)"/>

		<!-- set Image Width value -->
		<action code="ImageWidth('Adv-Contrast-Mode', $ImageWidth)"/>

		<!-- set Box Width value -->
		<action code="=($logmsg, 'Setting Box Width to ')"/>
		<action code="+=($logmsg, $BoxWidth)"/>
		<action code="+=($logmsg, 'mm...')"/>
		<log>script:$logmsg</log>
		<pdm action="write" name="Acq/Adv-Contrast-Mode/Scan/Width" base="10">script:$BoxWidth</pdm>
		<sleep time="1000"/>
		<pdm action="read" name="Acq/Adv-Contrast-Mode/Scan/Width" return="$check"/>
		<if test="equal($check, $BoxWidth)">
			<action code="=($logmsg, 'PASS! Current Box Width is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, 'mm as expected.')"/>
			<log>script:$logmsg</log>
		</if>
		<if test="notequal($check, $BoxWidth)">
			<action code="=($logmsg, 'FAIL! Current Box Width is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, 'mm, but expected Box Width is')"/>
			<action code="+=($logmsg, $BoxWidth)"/>
			<action code="+=($logmsg, 'mm!')"/>
			<log level="error">script:$logmsg</log>
		</if>
		<action code="CineLoopSize('Adv-Contrast-Mode')"/>
		<action code="Contrast('NLC')"/>
		<action code="StartScan('NLCMode')"/>

		<!-- set Line Density value -->
		<action code="LineDensity2('Adv-Contrast-Mode', $LineDensity)"/>

		<!-- read displayed Frame Rate -->
		<sleep time="1000"/>
		<pdm action="read" name="Acq/Adv-Contrast-Mode/Scan/Frame-Rate-Acquisition-Acq-Disp" return="$check"/>

		<!-- +5 or -5 is acceptable for Frame Rate -->
		<action code="=($FRL, -($NLCFR, 5.0))"/>	<!-- Frame Rate low limit -->
		<action code="=($FRH, +($NLCFR, 5.0))"/>	<!-- Frame Rate high limit -->

		<!-- log: PASS! Expected $mode Frame Rate is xxx, and actual is xxx, which is within the +-5 variance. -->
		<if test="and(or(greater($check, $FRL), equal($check, $FRL)), or(less($check, $FRH), equal($check, $FRH)))">
			<action code="=($logmsg, 'PASS! Expected ')"/>
			<action code="+=($logmsg, $mode)"/>
			<action code="+=($logmsg, ' Frame Rate is ')"/>
			<action code="+=($logmsg, $NLCFR)"/>
			<action code="+=($logmsg, ', and actual is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ', which is within the +-5 variance.')"/>
			<log>script:$logmsg</log>
		</if>

		<!-- log: FAIL! Expected B-Mode Frame Rate is xxx, but actual is xxx, which is outside the +-5 variance. -->
		<if test="or(less($check, $FRL), greater($check, $FRH))">
			<action code="=($logmsg, 'FAIL! Expected ')"/>
			<action code="+=($logmsg, $mode)"/>
			<action code="+=($logmsg, ' Frame Rate is ')"/>
			<action code="+=($logmsg, $NLCFR)"/>
			<action code="+=($logmsg, ', but actual is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ', which is outside the +-5 variance.')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Turn [Transmit Power] knob sub function A (verify PA Power value)

		Example:
			<action code="PAPowerA(20%, 16, 14)"/>

	************************************************************************************** -->
	<function name="PAPowerA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$targetno"/>
		<param name="$check"/>
		
		<action code="=($flag, 'FAIL stay')"/>
		<if test="equal($targetno, $check)">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current PA Power is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, '% as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Turn [Transmit Power] knob in PA-Mode

		Example:
			<action code="PAPower('Pa-Mode', 20)"/>

	************************************************************************************** -->
	<function name="PAPower" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>

		<action code="=($logmsg, 'Setting PA Power to ')"/>
		<action code="+=($logmsg, $target)"/>
		<action code="+=($logmsg, '% in PA-Mode...')"/>
		<log>script:$logmsg</log>

		<!-- change target PA Power from label to value -->
		<action code="=($targetno, 0)"/>
		<choose>
			<when test="equal($target, 20)">
				<action code="=($targetno, 16)"/>
			</when>
			<when test="equal($target, 30)">
				<action code="=($targetno, 15)"/>
			</when>
			<when test="equal($target, 40)">
				<action code="=($targetno, 14)"/>
			</when>
			<when test="equal($target, 50)">
				<action code="=($targetno, 13)"/>
			</when>
			<when test="equal($target, 60)">
				<action code="=($targetno, 11)"/>
			</when>
			<when test="equal($target, 70)">
				<action code="=($targetno, 10)"/>
			</when>
			<when test="equal($target, 80)">
				<action code="=($targetno, 8)"/>
			</when>
			<when test="equal($target, 90)">
				<action code="=($targetno, 7)"/>
			</when>
			<when test="equal($target, 100)">
				<action code="=($targetno, 5)"/>
			</when>
		</choose>

		<!-- read current PA Power value -->
		<pdm action="read" name="Acq/Pa-Mode/PaModeSoft/Laser-Power" return="$checkori"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="less($targetno, $checkori)">
			<loop count="8">
				<cmd code="TxPowerUp"/>
				<sleep time="3000"/>
				<pdm action="read" name="Acq/Pa-Mode/PaModeSoft/Laser-Power" return="$check"/>
				<if test="less($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Transmit Power] key up should increase PA Power, ')"/>
					<action code="+=($logmsg, 'but actually it decreases PA Power! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, PAPowerA($target, $targetno, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($targetno, $checkori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, PAPowerA($target, $targetno, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="greater($targetno, $checkori)">
			<loop count="8">
				<cmd code="TxPowerDown"/>
				<sleep time="3000"/>
				<pdm action="read" name="Acq/Pa-Mode/PaModeSoft/Laser-Power" return="$check"/>
				<if test="greater($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Transmit Power] key down should decrease PA Power, ')"/>
					<action code="+=($logmsg, 'but actually it increases PA Power! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, PAPowerA($target, $targetno, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected PA Power which is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, '%!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Cauculate and verify frame rate in PA-Mode (based on frame rate table values)

		Example:
			<action code="FrameRateTablePA(23.04, 15.00, 7)"/>

	************************************************************************************** -->
	<function name="FrameRateTablePA" inline="false">
		<param name="$ImageWidth"/>		<!-- mm -->
		<param name="$BoxWidth"/>		<!-- mm -->
		<param name="$PAFR"/>
		
		<!-- set Sensitivity value -->
		<action code="Sensitivity('Pa-Mode', 0)"/>

		<!-- set Image Width value -->
		<action code="ImageWidth('Pa-Mode', $ImageWidth)"/>

		<!-- set Box Width value -->
		<action code="=($logmsg, 'Setting Box Width to ')"/>
		<action code="+=($logmsg, $BoxWidth)"/>
		<action code="+=($logmsg, 'mm...')"/>
		<log>script:$logmsg</log>
		<pdm action="write" name="Acq/Pa-Mode/Scan/Width" base="10">script:$BoxWidth</pdm>
		<sleep time="1000"/>
		<pdm action="read" name="Acq/Pa-Mode/Scan/Width" return="$check"/>
		<if test="equal($check, $BoxWidth)">
			<action code="=($logmsg, 'PASS! Current Box Width is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, 'mm as expected.')"/>
			<log>script:$logmsg</log>
		</if>
		<if test="notequal($check, $BoxWidth)">
			<action code="=($logmsg, 'FAIL! Current Box Width is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, 'mm, but expected Box Width is')"/>
			<action code="+=($logmsg, $BoxWidth)"/>
			<action code="+=($logmsg, 'mm!')"/>
			<log level="error">script:$logmsg</log>
		</if>
		<action code="CineLoopSize('Pa-Mode')"/>
		<action code="StartScan('PaMode')"/>

		<!-- set Box to the very left side of the image -->
		<action code="BoxPosition('left')"/>

		<!-- read displayed Frame Rate -->
		<sleep time="3000"/>
		<pdm action="read" name="Acq/Pa-Mode/Scan/Frame-Rate-Acquisition-Acq-Disp" return="$check"/>

		<!-- log: PASS! Frame Rate is xxx as expected. -->
		<if test="equal($check, $PAFR)">
			<action code="=($logmsg, 'PASS! Frame Rate is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ' as expected.')"/>
			<log>script:$logmsg</log>
		</if>

		<!-- log: FAIL! Current Frame Rate is xxx, but expected Frame Rate is xxx. -->
		<if test="notequal($check, $PAFR)">
			<action code="=($logmsg, 'FAIL! Current Frame Rate is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, ', but expected Frame Rate is ')"/>
			<action code="+=($logmsg, $PAFR)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Caculate real voltage value for PW Doppler Mode and PW Tissue Doppler Mode

		Example:
			<action code="VoltagePw('Pw-Mode', $same, 30.0, 0.0013125)"/>
			<action code="VoltagePw('Pw-Tissue-Mode', $same, 26.0, 0.00333)"/>

	************************************************************************************** -->
	<function name="VoltagePw" inline="false">
		<param name="$mode"/>
		<param name="$same"/>
		<param name="$Vmax"/>
		<param name="$k"/>

		<if test="notequal($same, 'na')">		
			<!-- check the real voltage value $V-->
			<!-- First, you need to do a dcm read to read from hardware -->
			<dcm action="read" name="Hardware/Tx/HwTxCbCommon/VP-Mode2"/>
			<!-- Then, a pdm read into variable, VP-Mode2 is a memory type and so you need to define it is ulong and store it in an array -->
			<pdm action="read" name="Hardware/Tx/HwTxCbCommon/VP-Mode2" type="ulong" return="$check[]"/>
			<!-- Next, the byte orders are different on the Power PC (big endian) and computer (Intel little endian) -->
			<action code="=($check, byteswapulong($check))"/>
			<!-- Next, the voltage is contains between bit 0 to bit 7, zero out bit 8 & 9 -->
			<action code="=($check, bitwiseAnd($check, 255))"/>	
			<!-- Decode Voltage $V= $check * 40.2696 / 255.0 -->
			<action code="changetype($check, 'double')"/>
			<action code="=($check, multiply($check, 40.2696))"/>
			<action code="=($V, divide($check, 255.0))"/>

			<!-- calculate sqrt(k*TxFreq/TxCycle/PRF)-->
			<!-- get the Transmit Frequency value $TxFreq -->
			<action code="=($path, 'Acq/')"/>
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/Tx/Frequency')"/>
			<pdm action="read" name="script:$path" return="$TxFreq"/>
			<!-- get the Transmit Cycles value $TxCycle -->
			<action code="=($path, 'Acq/')"/>
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/Tx/Cycles')"/>
			<pdm action="read" name="script:$path" return="$TxCycle"/>
			<action code="changetype($TxCycle, 'double')"/>
			<!-- get the PRF value $PRF -->
			<action code="=($path, 'Acq/')"/>
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/Tx/PRF-Display')"/>
			<pdm action="read" name="script:$path" return="$PRF"/>
			<!-- calculate sqrt($k*$TxFreq/$TxCycle/$PRF)-->
			<action code="=($check1, multiply($k, $TxFreq))"/>
			<action code="=($check1, divide($check1, $TxCycle))"/>
			<action code="=($check1, divide($check1, $PRF))"/>
			<action code="=($check1, sqrt($check1))"/>

			<!-- check the Tx Power value $Power-->
			<!-- $path: Acq/$mode/Tx/Power -->
			<action code="=($path, 'Acq/')"/>
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/Tx/Power')"/>
			<pdm action="read" name="script:$path" return="$check2"/>
			<action code="=($Power, divide($check2, 100.0))"/>
			<action code="=($check2, sqrt($Power))"/>

			<!-- $V = $Vmax * sqrt($k*$TxFreq/$TxCycle/$PRF) * sqrt($Power) -->
			<action code="=($check3, multiply($Vmax, $check1))"/>
			<if test="or(greater($check3, $Vmax), equal($check3, $Vmax))">
				<action code="=($check, multiply($Vmax, $check2))"/>
			</if>
			<if test="less($check3, $Vmax)">
				<action code="=($check, multiply($check3, $check2))"/>
			</if>

			<!-- 10% variance is acceptable -->
			<action code="=($VL, *($V, 0.95))"/>	<!-- Voltage low limit -->
			<action code="=($VH, *($V, 1.05))"/>	<!-- Voltage high limit -->
			<if test="or(greater($check3, $Vmax), equal($check3, $Vmax))">
				<if test="and(or(greater($check, $VL), equal($check, $VL)), or(less($check, $VH), equal($check, $VH)))">
					<action code="=($logmsg, 'PASS! V = Vmax * sqrt(Power) as expected. Real voltage value V is ')"/>
					<action code="+=($logmsg, $V)"/>
					<action code="+=($logmsg, 'v, and Vmax * sqrt(Power) = ')"/>
					<action code="+=($logmsg, $check)"/>
					<action code="+=($logmsg, 'v. Max voltage value Vmax is ')"/>
					<action code="+=($logmsg, $Vmax)"/>
					<action code="+=($logmsg, 'v. sqrt(Power) is ')"/>
					<action code="+=($logmsg, $check2)"/>
					<action code="+=($logmsg, ', Transmit Power value Power is ')"/>
					<action code="+=($logmsg, $Power)"/>
					<action code="+=($logmsg, '.')"/>
					<log>script:$logmsg</log>
				</if>
				<if test="or(less($check, $VL), greater($check, $VH))">
					<action code="=($logmsg, 'FAIL! V != Vmax * sqrt(Power)! Real voltage value V is ')"/>
					<action code="+=($logmsg, $V)"/>
					<action code="+=($logmsg, 'v, but Vmax * sqrt(Power) = ')"/>
					<action code="+=($logmsg, $check)"/>
					<action code="+=($logmsg, 'v! Max voltage value Vmax is ')"/>
					<action code="+=($logmsg, $Vmax)"/>
					<action code="+=($logmsg, 'v. sqrt(Power) is ')"/>
					<action code="+=($logmsg, $check2)"/>
					<action code="+=($logmsg, ', Transmit Power value Power is ')"/>
					<action code="+=($logmsg, $Power)"/>
					<action code="+=($logmsg, '.')"/>
					<log level="error">script:$logmsg</log>
				</if>
			</if>
			<if test="less($check3, $Vmax)">
				<if test="and(or(greater($check, $VL), equal($check, $VL)), or(less($check, $VH), equal($check, $VH)))">
					<action code="=($logmsg, 'PASS! V = Vmax * sqrt(k*TxFreq/TxCycle/PRF) * sqrt(Power) as expected. Real voltage value V is ')"/>
					<action code="+=($logmsg, $V)"/>
					<action code="+=($logmsg, 'v, and Vmax * sqrt(k*TxFreq/TxCycle/PRF) * sqrt(Power) = ')"/>
					<action code="+=($logmsg, $check)"/>
					<action code="+=($logmsg, 'v. Max voltage value Vmax is ')"/>
					<action code="+=($logmsg, $Vmax)"/>
					<action code="+=($logmsg, 'v. sqrt(k*TxFreq/TxCycle/PRF) is ')"/>
					<action code="+=($logmsg, $check1)"/>
					<action code="+=($logmsg, 'v, Thermal-k is ')"/>
					<action code="+=($logmsg, $k)"/>
					<action code="+=($logmsg, ', Transmit Frequency is ')"/>
					<action code="+=($logmsg, $TxFreq)"/>
					<action code="+=($logmsg, 'Hz, Transmit Cycle is ')"/>
					<action code="+=($logmsg, $TxCycle)"/>
					<action code="+=($logmsg, ', PRF is ')"/>
					<action code="+=($logmsg, $PRF)"/>
					<action code="+=($logmsg, 'Hz. sqrt(Power) is ')"/>
					<action code="+=($logmsg, $check2)"/>
					<action code="+=($logmsg, ', Transmit Power value Power is ')"/>
					<action code="+=($logmsg, $Power)"/>
					<action code="+=($logmsg, '.')"/>
					<log>script:$logmsg</log>
				</if>
				<if test="or(less($check, $VL), greater($check, $VH))">
					<action code="=($logmsg, 'FAIL! V != Vmax * sqrt(Power)! Real voltage value V is ')"/>
					<action code="+=($logmsg, $V)"/>
					<action code="+=($logmsg, 'v, but Vmax * sqrt(k*TxFreq/TxCycle/PRF) * sqrt(Power) = ')"/>
					<action code="+=($logmsg, $check)"/>
					<action code="+=($logmsg, 'v! Max voltage value Vmax is ')"/>
					<action code="+=($logmsg, $Vmax)"/>
					<action code="+=($logmsg, 'v. sqrt(k*TxFreq/TxCycle/PRF) is ')"/>
					<action code="+=($logmsg, $check1)"/>
					<action code="+=($logmsg, 'v, Thermal-k is ')"/>
					<action code="+=($logmsg, $k)"/>
					<action code="+=($logmsg, ', Transmit Frequency is ')"/>
					<action code="+=($logmsg, $TxFreq)"/>
					<action code="+=($logmsg, 'Hz, Transmit Cycle is ')"/>
					<action code="+=($logmsg, $TxCycle)"/>
					<action code="+=($logmsg, ', PRF is ')"/>
					<action code="+=($logmsg, $PRF)"/>
					<action code="+=($logmsg, 'Hz. sqrt(Power) is ')"/>
					<action code="+=($logmsg, $check2)"/>
					<action code="+=($logmsg, ', Transmit Power value Power is ')"/>
					<action code="+=($logmsg, $Power)"/>
					<action code="+=($logmsg, '.')"/>
					<log level="error">script:$logmsg</log>
				</if>
			</if>
		</if>
	</function>

	<!-- *************************************************************************************

		Caculate Sample Volume Length value for PW Doppler Mode and PW Tissue Doppler Mode

		Example:
			<action code="SVLength('Pw-Mode', $same)"/>
			<action code="SVLength('Pw-Tissue-Mode', $same)"/>

	************************************************************************************** -->
	<function name="SVLength" inline="false">
		<param name="$mode"/>
		<param name="$same"/>

		<if test="notequal($same, 'na')">		
			<!-- get the Sample Volume Length value $SVLength-->
			<action code="=($path, 'Acq/')"/>
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/PwModeSoft/SV-Size')"/>
			<pdm action="read" name="script:$path" return="$SVLength"/>
			<!-- get the Number of Cycles value $Ncycles -->
			<action code="=($path, 'Acq/')"/>
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/Tx/Cycles')"/>
			<pdm action="read" name="script:$path" return="$Ncycles"/>
			<action code="changetype($Ncycles, 'double')"/>
			<!-- get the Transmit Frequency value $TxFreq -->
			<action code="=($path, 'Acq/')"/>
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/Tx/Frequency')"/>
			<pdm action="read" name="script:$path" return="$TxFreq"/>
			<!-- get the Gate Size value $Nsample -->
			<action code="=($path, 'Acq/')"/>
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/Rx/Gate-Size')"/>
			<pdm action="read" name="script:$path" return="$Nsample"/>
			<action code="changetype($Nsample, 'double')"/>
			<!-- get the Receive Frequency value $RxFreq -->
			<action code="=($path, 'Acq/')"/>
			<action code="+=($path, $mode)"/>
			<action code="+=($path, '/Rx/Frequency')"/>
			<pdm action="read" name="script:$path" return="$RxFreq"/>

			<!-- calculate $Ttransmit = $Ncycles/$TxFreq-->
			<action code="=($Ttransmit, divide($Ncycles, $TxFreq))"/>
			<!-- calculate $Treceive = ($Nsample-1)/$RxFreq-->
			<action code="=($check1, subtract($Nsample, 1.0))"/>
			<action code="=($Treceive, divide($check1, $RxFreq))"/>
			<!-- calculate $check2 = $Ttransmit+$Treceive-->
			<action code="=($check2, add($Ttransmit, $Treceive))"/>
			<!-- calculate $c/2 * $check2 + $ringdown -->
			<action code="=($c, 1540000.0)"/>
			<action code="=($ringdown, 0.05)"/>
			<action code="=($check, divide($c, 2.0))"/>
			<action code="=($check, multiply($check, $check2))"/>
			<action code="=($check, add($check, $ringdown))"/>

			<action code="=($diff, subtract($check, $SVLength))"/>
			<action code="=($diff, abs($diff))"/>
			<if test="less($diff, 0.0001)">		<!-- if $SVLength = $check -->
				<action code="=($logmsg, 'PASS! SVLength = c/2 * (Ttransmit+Treceive) + ringdown as expected. Sample Volume Length is ')"/>
				<action code="+=($logmsg, $SVLength)"/>
				<action code="+=($logmsg, 'mm, and c/2 * (Ttransmit+Treceive) + ringdown = ')"/>
				<action code="+=($logmsg, $check)"/>
				<action code="+=($logmsg, 'mm. Speed of sound in blood c is ')"/>
				<action code="+=($logmsg, $c)"/>
				<action code="+=($logmsg, 'mm/s. Ttransmit = Ncycles/TxFreq is ')"/>
				<action code="+=($logmsg, $Ttransmit)"/>
				<action code="+=($logmsg, ', Number of Cycles is ')"/>
				<action code="+=($logmsg, $Ncycles)"/>
				<action code="+=($logmsg, ', Transmit Frequency is ')"/>
				<action code="+=($logmsg, $TxFreq)"/>
				<action code="+=($logmsg, 'Hz. Treceive = (Nsample-1)/RxFreq is ')"/>
				<action code="+=($logmsg, $Treceive)"/>
				<action code="+=($logmsg, ', Gate Size Nsample is ')"/>
				<action code="+=($logmsg, $Nsample)"/>
				<action code="+=($logmsg, ', Receive Frequency is ')"/>
				<action code="+=($logmsg, $RxFreq)"/>
				<action code="+=($logmsg, 'Hz. Ring Down is ')"/>
				<action code="+=($logmsg, $ringdown)"/>
				<action code="+=($logmsg, 'mm.')"/>
				<log>script:$logmsg</log>
			</if>
			<if test="greater($diff, 0.0001)">		<!-- if $SVLength != $check -->
				<action code="=($logmsg, 'PASS! SVLength != c/2 * (Ttransmit+Treceive) + ringdown as expected. Sample Volume Length is ')"/>
				<action code="+=($logmsg, $SVLength)"/>
				<action code="+=($logmsg, 'mm, but c/2 * (Ttransmit+Treceive) + ringdown = ')"/>
				<action code="+=($logmsg, $check)"/>
				<action code="+=($logmsg, 'mm. Speed of sound in blood c is ')"/>
				<action code="+=($logmsg, $c)"/>
				<action code="+=($logmsg, 'mm/s. Ttransmit = Ncycles/TxFreq is ')"/>
				<action code="+=($logmsg, $Ttransmit)"/>
				<action code="+=($logmsg, ', Number of Cycles is ')"/>
				<action code="+=($logmsg, $Ncycles)"/>
				<action code="+=($logmsg, ', Transmit Frequency is ')"/>
				<action code="+=($logmsg, $TxFreq)"/>
				<action code="+=($logmsg, 'Hz. Treceive = (Nsample-1)/RxFreq is ')"/>
				<action code="+=($logmsg, $Treceive)"/>
				<action code="+=($logmsg, ', Gate Size Nsample is ')"/>
				<action code="+=($logmsg, $Nsample)"/>
				<action code="+=($logmsg, ', Receive Frequency is ')"/>
				<action code="+=($logmsg, $RxFreq)"/>
				<action code="+=($logmsg, 'Hz. Ring Down is ')"/>
				<action code="+=($logmsg, $ringdown)"/>
				<action code="+=($logmsg, 'mm.')"/>
				<log level="error">script:$logmsg</log>
			</if>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [SV/Gate] key sub function A (verify Gate-Size, Cycles, and Sample Volume Size value)

		Example:
			<action code="GatePwA(2, 2, 2, 2)"/>

	************************************************************************************** -->
	<function name="GatePwA" inline="false" return="$flag">
		<param name="$targetGateSize"/>
		<param name="$checkGateSize"/>
		<param name="$targetCycles"/>
		<param name="$checkCycles"/>
		
		<action code="=($flag, 'FAIL stay')"/>
		<if test="and(equal($targetGateSize, $checkGateSize), equal($targetCycles, $checkCycles))">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Gate-Size is ')"/>
			<action code="+=($logmsg, $checkGateSize)"/>
			<action code="+=($logmsg, ' and Cycles is ')"/>
			<action code="+=($logmsg, $checkCycles)"/>
			<action code="+=($logmsg, ' as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [SV/Gate] key in PW/PW Tissue Doppler Mode

		Example:
			<action code="GatePw('Pw-Mode', 2, 2)"/>

	************************************************************************************** -->
	<function name="GatePw" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$targetGateSize"/>
		<param name="$targetCycles"/>

		<action code="=($target, add($targetGateSize, $targetCycles))"/>

		<action code="=($logmsg, 'Toggling [SV/Gate] key to change Sample Volume Size in ')"/>
		<action code="+=($logmsg, $mode)"/>
		<action code="+=($logmsg, '...')"/>
		<log>script:$logmsg</log>

		<!-- $pathGateSize: Acq/$mode/Rx/Gate-Size -->
		<action code="=($pathGateSize, 'Acq/')"/>
		<action code="+=($pathGateSize, $mode)"/>
		<action code="+=($pathGateSize, '/Rx/Gate-Size')"/>
		<!-- read current Gate-Size value -->
		<pdm action="read" name="script:$pathGateSize" return="$checkoriGateSize"/>
		<!-- $pathCycles: Acq/$mode/Tx/Cycles -->
		<action code="=($pathCycles, 'Acq/')"/>
		<action code="+=($pathCycles, $mode)"/>
		<action code="+=($pathCycles, '/Tx/Cycles')"/>
		<!-- read current Cycles value -->
		<pdm action="read" name="script:$pathCycles" return="$checkoriCycles"/>
		<!-- $pathSVSize: Acq/$mode/PwModeSoft/SV-Size-->
		<action code="=($pathSVSize, 'Acq/')"/>
		<action code="+=($pathSVSize, $mode)"/>
		<action code="+=($pathSVSize, '/PwModeSoft/SV-Size')"/>
		<!-- read current Sample Volume Size value -->
		<pdm action="read" name="script:$pathSVSize" return="$checkoriSVSize"/>

		<action code="=($checkori, add($checkoriGateSize, $checkoriCycles))"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="greater($target, $checkori)">
			<loop count="16">
				<cmd code="SvSizeUp"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$pathGateSize" return="$checkGateSize"/>
				<pdm action="read" name="script:$pathCycles" return="$checkCycles"/>
				<pdm action="read" name="script:$pathSVSize" return="$checkSVSize"/>
				<action code="=($check, add($checkGateSize, $checkCycles))"/>
				<if test="greater($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [SV/Gate] key up should increase Gate-Size+Cycles, ')"/>
					<action code="+=($logmsg, 'but actually it decreases Gate-Size+Cycles! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<if test="greater($checkoriSVSize, $checkSVSize)">
					<action code="=($logmsg, 'FAIL! Toggle [SV/Gate] key up should increase Sample Volume Size, ')"/>
					<action code="+=($logmsg, 'but actually it decreases Sample Volume Size! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, GatePwA($targetGateSize, $checkGateSize, $targetCycles, $checkCycles))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($target, $checkori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, GatePwA($targetGateSize, $checkoriGateSize, $targetCycles, $checkoriCycles))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="less($target, $checkori)">
			<loop count="16">
				<cmd code="SvSizeDown"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$pathGateSize" return="$checkGateSize"/>
				<pdm action="read" name="script:$pathCycles" return="$checkCycles"/>
				<pdm action="read" name="script:$pathSVSize" return="$checkSVSize"/>
				<action code="=($check, add($checkGateSize, $checkCycles))"/>
				<if test="less($checkori, $target)">
					<action code="=($logmsg, 'FAIL! Toggle [SV/Gate] key down should decrease Gate-Size+Cycles, ')"/>
					<action code="+=($logmsg, 'but actually it increases Gate-Size+Cycles! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<if test="less($checkoriSVSize, $checkSVSize)">
					<action code="=($logmsg, 'FAIL! Toggle [SV/Gate] key down should decrease Sample Volume Size, ')"/>
					<action code="+=($logmsg, 'but actually it increases Sample Volume Size! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, GatePwA($targetGateSize, $checkGateSize, $targetCycles, $checkCycles))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected Gate-Size which is ')"/>
			<action code="+=($logmsg, $targetGateSize)"/>
			<action code="+=($logmsg, ' and/or expected Cycles which is ')"/>
			<action code="+=($logmsg, $targetCycles)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Baseline] key sub function A (verify Baseline value)

		Example:
			<action code="BaselineA(20, 10)"/>

	************************************************************************************** -->
	<function name="BaselineA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$check"/>

		<action code="=($flag, 'FAIL stay')"/>
		<if test="equal($target, $check)">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Baseline is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, '% as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Baseline] key

		Example:
			<action code="Baseline('Pw-Mode', 20)"/>

	************************************************************************************** -->
	<function name="Baseline" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>

		<action code="=($logmsg, 'Setting Baseline to ')"/>
		<action code="+=($logmsg, $target)"/>
		<action code="+=($logmsg, '% in ')"/>
		<action code="+=($logmsg, $mode)"/>
		<action code="+=($logmsg, '...')"/>
		<log>script:$logmsg</log>

		<!-- $path: Acq/$mode/PwModeSoft/Display-Baseline -->
		<action code="=($path, 'Acq/')"/>
		<action code="+=($path, $mode)"/>
		<action code="+=($path, '/PwModeSoft/Display-Baseline')"/>
		<!-- read current Baseline value -->
		<pdm action="read" name="script:$path" return="$checkori"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="greater($target, $checkori)">
			<loop count="10">
				<cmd code="BaselineUp"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="greater($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Baseline] key up should increase Baseline, ')"/>
					<action code="+=($logmsg, 'but actually it decreases Baseline! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, BaselineA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($target, $checkori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, BaselineA($target, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="less($target, $checkori)">
			<action code="=($checkorig, $checkori)"/>
			<loop count="10">
				<cmd code="BaselineDown"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="less($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Baseline] key down should decrease Baseline, ')"/>
					<action code="+=($logmsg, 'but actually it increases Baseline! ')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, BaselineA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected Baseline which is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, '%!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>
	
	<!-- *************************************************************************************

		Toggle [Wall Filter] key sub function A (verify Wall Filter value)

		Example:
			<action code="WallFilterA(1250, 1250)"/>

	************************************************************************************** -->
	<function name="WallFilterA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$check"/>

		<action code="=($flag, 'FAIL stay')"/>
		<if test="equal($target, $check)">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Wall Filter is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, 'Hz as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [Wall Filter] key

		Example:
			<action code="WallFilter('Pw-Mode', 0.1)"/>

	************************************************************************************** -->
	<function name="WallFilter" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$targetno"/>

		<action code="=($logmsg, 'Setting Wall Filter to ')"/>
		<action code="+=($logmsg, $targetno)"/>
		<action code="+=($logmsg, '*PRF in ')"/>
		<action code="+=($logmsg, $mode)"/>
		<action code="+=($logmsg, '...')"/>
		<log>script:$logmsg</log>

		<!-- Calculate $targetno * PRF = $target -->
		<!-- $path: Acq/$mode/Tx/PRF-Display -->
		<action code="=($path, 'Acq/')"/>
		<action code="+=($path, $mode)"/>
		<action code="+=($path, '/Tx/PRF-Display')"/>
		<!-- read current PRF value -->
		<pdm action="read" name="script:$path" return="$PRF"/>
		<action code="=($target, multiply($targetno, $PRF))"/>

		<!-- $path: Acq/$mode/PwModeSoft/Clutter-HP -->
		<action code="=($path, 'Acq/')"/>
		<action code="+=($path, $mode)"/>
		<action code="+=($path, '/PwModeSoft/Clutter-HP')"/>
		<!-- read current Wall Filter value -->
		<pdm action="read" name="script:$path" return="$checkori"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="greater($target, $checkori)">
			<loop count="4">
				<cmd code="WallFilterUp"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="greater($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Wall Filter] key up should increase Wall Filter, ')"/>
					<action code="+=($logmsg, 'but actually it decreases Wall Filter!')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, WallFilterA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($target, $checkori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, WallFilterA($target, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="less($target, $checkori)">
			<action code="=($checkorig, $checkori)"/>
			<loop count="4">
				<cmd code="WallFilterDown"/>
				<sleep time="1000"/>
				<pdm action="read" name="script:$path" return="$check"/>
				<if test="less($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [Wall Filter] key down should decrease Wall Filter, ')"/>
					<action code="+=($logmsg, 'but actually it increases Wall Filter!')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, WallFilterA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected Wall Filter which is ')"/>
			<action code="+=($logmsg, $targetno)"/>
			<action code="+=($logmsg, '*PRF! Current PRF is ')"/>
			<action code="+=($logmsg, $PRF)"/>
			<action code="+=($logmsg, 'Hz and Wall Filter is')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, 'Hz.')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>
	
	<!-- *************************************************************************************

		Toggle [Wall Filter] key

		Example:
			<action code="WallFilterToggle()"/>

	************************************************************************************** -->
	<function name="WallFilterToggle" inline="false">
    	          <action code="ScanRestart2('WallFilter', 'Pw-Mode', 0.1)"/>
    	          <action code="Boundary('Acq/Pw-Mode/PwModeSoft/Clutter-HP', 'WallFilterUp')"/>
    	          <action code="ScanRestart2('WallFilter', 'Pw-Mode', 0.075)"/>
    	          <action code="ScanRestart2('WallFilter', 'Pw-Mode', 0.05)"/>
    	          <action code="ScanRestart2('WallFilter', 'Pw-Mode', 0.025)"/>
    	          <action code="ScanRestart2('WallFilter', 'Pw-Mode', 0.01)"/>
    	          <action code="Boundary('Acq/Pw-Mode/PwModeSoft/Clutter-HP', 'WallFilterDown')"/>
	</function>
	
	<!-- *************************************************************************************

		Toggle [SV/Gate] key sub function A (verify Gate size value in M/AM Mode)

		Example:
			<action code="GateMA(1.8, 1.8)"/>

	************************************************************************************** -->
	<function name="GateMA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$check"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($diff, subtract($check, $target))"/>
		<action code="=($diff, abs($diff))"/>
		<if test="less($diff, 0.0001)">      <!-- if $check=$target -->
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Gate Size is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, 'mm as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Toggle [SV/Gate] key in M/AM Mode

		Example:
			<action code="GateM('M-Mode', 1.8)"/>

	************************************************************************************** -->
	<function name="GateM" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>

		<action code="=($logmsg, 'Setting Gate Size to ')"/>
		<action code="+=($logmsg, $target)"/>
		<action code="+=($logmsg, 'mm...')"/>
		<log>script:$logmsg</log>

		<!-- read current Gate Size value -->
		<pdm action="read" name="Acq/M-Mode/Scan/Height" return="$checkori"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="greater($target, $checkori)">
			<loop count="17">
				<cmd code="SvSizeUp"/>
				<sleep time="2000"/>
				<pdm action="read" name="Acq/M-Mode/Scan/Height" return="$check"/>
				<if test="greater($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [SV/Gate] key up should increase Gate Size, ')"/>
					<action code="+=($logmsg, 'but actually it decreases Gate Size!')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, GateMA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($target, $checkori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, GateMA($target, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="less($target, $checkori)">
			<action code="=($checkorig, $checkori)"/>
			<loop count="17">
				<cmd code="SvSizeDown"/>
				<sleep time="2000"/>
				<pdm action="read" name="Acq/M-Mode/Scan/Height" return="$check"/>
				<if test="less($checkori, $check)">
					<action code="=($logmsg, 'FAIL! Toggle [SV/Gate] key down should decrease Gate Size, ')"/>
					<action code="+=($logmsg, 'but actually it increases Gate Size!')"/>
					<log level="error">script:$logmsg</log>
					<break/>
				</if>
				<action code="=($flag, GateMA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="equal($flag, 'FAIL stay')">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected Gate Size which is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, 'mm!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>

        <!-- *************************************************************************************

		Turn [PW Angle/AM-Mode] knob sub function A (verify Angle value)

		Example:
			<action code="AMAngleA(5, 0)"/>

	************************************************************************************** -->
	<function name="AMAngleA" inline="false" return="$flag">
		<param name="$target"/>
		<param name="$check"/>

		<action code="=($flag, 'FAIL stay')"/>
		<if test="equal($target, $check)">
			<action code="=($flag, 'PASS break')"/>
			<action code="=($logmsg, 'PASS! Current Angle is ')"/>
			<action code="+=($logmsg, $check)"/>
			<action code="+=($logmsg, 'degree as expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>

	<!-- *************************************************************************************

		Turn [PW Angle/AM-Mode] knob in AM-Mode
		(this key also works in PW/PW Tissue Doppler Mode, but not covered by this function)

		Example:
			<action code="AMAngle('AM-Mode', 15, 'in range')"/>
			<action code="AMAngle('AM-Mode', 180, 'out of range')"/>

	************************************************************************************** -->
	<function name="AMAngle" inline="false" return="$same">
		<param name="$mode"/>
		<param name="$target"/>
		<param name="$range"/>

		<action code="=($logmsg, 'Setting AM Angle to ')"/>
		<action code="+=($logmsg, $target)"/>
		<action code="+=($logmsg, 'degree...')"/>
		<log>script:$logmsg</log>

		<!-- read current Angle value -->
		<pdm action="read" name="Acq/M-Mode/AMModeSoft/Gate-Angle" return="$checkori"/>

		<action code="=($flag, 'FAIL stay')"/>
		<action code="=($same, 'not same')"/>
		<if test="greater($target, $checkori)">
			<loop count="35">
				<cmd code="DopplerAngleUp"/>
				<sleep time="1000"/>
				<pdm action="read" name="Acq/M-Mode/AMModeSoft/Gate-Angle" return="$check"/>
				<action code="=($flag, AMAngleA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>
		<if test="equal($target, $checkori)">
			<action code="=($same, 'same')"/>
			<action code="=($flag, AMAngleA($target, $checkori))"/>
			<if test="equal($flag, 'PASS break')">
				<break/>
			</if>
		</if>
		<if test="less($target, $checkori)">
			<loop count="35">
				<cmd code="DopplerAngleDown"/>
				<sleep time="1000"/>
				<pdm action="read" name="Acq/M-Mode/AMModeSoft/Gate-Angle" return="$check"/>
				<action code="=($flag, AMAngleA($target, $check))"/>
				<if test="equal($flag, 'PASS break')">
					<break/>
				</if>
			</loop>
		</if>

		<if test="and(equal($flag, 'FAIL stay'), equal($range, 'in range'))">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'FAIL! Can NOT reach expected AM Angle which is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, 'degree!')"/>
			<log level="error">script:$logmsg</log>
		</if>

		<if test="and(equal($flag, 'FAIL stay'), equal($range, 'out of range'))">
			<action code="=($same, 'na')"/>
			<action code="=($logmsg, 'PASS! Can NOT reach AM Angle ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, 'degree which is expected.')"/>
			<log>script:$logmsg</log>
		</if>
	</function>
	
	<!-- *************************************************************************************

		Detect if the current mode is AM-Mode or M-M0de

		Example:
			<action code="MAM('AMMode')"/>
			<action code="MAM('MMode')"/>

	************************************************************************************** -->
	<function name="MAM" inline="false">
		<param name="$target"/>

		<!-- read current scanning mode -->
		<action code="=($cmode, AcqMode())"/>

		<if test="equal($cmode, $target)">
			<action code="=($logmsg, 'PASS! Current mode is ')"/>
			<action code="+=($logmsg, $cmode)"/>
			<action code="+=($logmsg, ' as expected.')"/>
			<log>script:$logmsg</log>
		</if>

		<if test="notequal($expected, $target)">
			<action code="=($logmsg, 'FAIL! Current mode is ')"/>
			<action code="+=($logmsg, $cmode)"/>
			<action code="+=($logmsg, ', but expected mode is ')"/>
			<action code="+=($logmsg, $target)"/>
			<action code="+=($logmsg, '!')"/>
			<log level="error">script:$logmsg</log>
		</if>
	</function>
	
	<!-- *************************************************************************************

		Detect if the Mode not supported window is popped up or not

		Example:
			<action code="ModeNotSupported('ContrastMode')"/>
			<action code="ModeNotSupported('PaMode')"/>

	************************************************************************************** -->
	<function name="ModeNotSupported" inline="false">
		<param name="$mode"/>

		<cmd code="script:$mode"/>
		<sleep time="1000"/>      <!-- PA-Mode needs longer time -->
		<ui>
			<window action="find" title="Mode not supported" return="$check"/>
		</ui>

		<if test="notequal(0, $check)">
			<log>PASS! "Mode not supported" window popped up.</log>
			<ui>
				<input key="#SE"/>  <!-- use Enter key to OK the window -->
			</ui>
		</if>
		<if test="equal(0, $check)">
			<log level="error">FAIL! "Mode not supported" window did NOT pop up!</log>
		</if>
	</function>


  <!-- *************************************************************************************

		Detect the current acquisition mode (either in scan or pause scan)

		Example:
			<action code="=($cmode, AcqMode())"/>

	************************************************************************************** -->
  <function name="IsCostReduction" inline="false" return="$bCR">
    <action code="setlength($fpgaVersions[], 23)"/>
    <action code="assign($fpgaVersions[], 0)"/>
    <dcm action="read" name="Hardware/Control/HwSystemControl/Fpga-Revisions"/>
    <pdm action="read" name="Hardware/Control/HwSystemControl/Fpga-Revisions" type="ulong" return="$fpgaVersions[]"/>

    <action code="assign($logmsg, 'CB HW revision = ')"/>
    <action code="assign($logmsg, add($logmsg, $fpgaVersions[14]))"/>
    <log>script:$logmsg</log>

    <!--action code="assign($cbRevision, byteswap($cbRevision))"/-->
    <!--action code="assign($cbRevision, bitwiseAnd($fpgaVersions[14],65536))"/-->
    <action code="assign($cbRevision, bitwiseAnd($fpgaVersions[14], 256))"/>
    <!-- 0x00010000 to select just the CB revision-->

    <action code="=($bCR, 'false')"/>
    <choose>
      <when test="greater($cbRevision, 0)">
        <action code="assign($logmsg, 'Cost reduction system, CB HW revision ')"/>
        <action code="assign($logmsg, add($logmsg, $cbRevision))"/>
        <log>script:$logmsg</log>
        <!-- Code for cost reduction systems-->
        <action code="=($bCR, 'true')"/>
      </when>
      <otherwise>
        <action code="assign($logmsg, 'CB HW revision 0')"/>
        <log>script:$logmsg</log>
      </otherwise>
    </choose>
  </function>

</script>





























